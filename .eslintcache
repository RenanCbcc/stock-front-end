[{"C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\Routes.jsx":"1","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\error\\NotFoundPage.js":"2","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\client\\Client.jsx":"3","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\order\\Order.jsx":"4","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\Sale.jsx":"5","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\payment\\Payment.jsx":"6","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\payment\\Payments.jsx":"7","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\TableItem.jsx":"8","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\order\\Items.jsx":"9","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\TabItem.jsx":"10","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\AutomaticTabPanel.jsx":"11","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\ManualTabPanel.jsx":"12","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\Routes.jsx":"13","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\error\\NotFoundPage.js":"14","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\client\\Client.jsx":"15","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\Sale.jsx":"16","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\order\\Order.jsx":"17","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\payment\\Payment.jsx":"18","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\payment\\Payments.jsx":"19","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\TableItem.jsx":"20","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\TabItem.jsx":"21","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\order\\Items.jsx":"22","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\AutomaticTabPanel.jsx":"23","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\ManualTabPanel.jsx":"24","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\auth\\Login.jsx":"25","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\auth\\FormLogin.jsx":"26","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\services\\Api.jsx":"27","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\category\\Category.jsx":"28","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\validators\\Validator.jsx":"29","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\Dashboard.jsx":"30","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\listItems.jsx":"31","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\supplier\\Supplier.jsx":"32","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\product\\Product.jsx":"33","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\ListItems.jsx":"34","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\index.jsx":"35","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\report\\Report.jsx":"36","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\report\\OnProducts.jsx":"37","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\report\\OnClients.jsx":"38","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\context\\AuthContext.js":"39","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\NavBar.jsx":"40"},{"size":1298,"mtime":1610279390581,"results":"41","hashOfConfig":"42"},{"size":449,"mtime":1610279886550,"results":"43","hashOfConfig":"42"},{"size":7793,"mtime":1610289557941,"results":"44","hashOfConfig":"42"},{"size":3973,"mtime":1610289699415,"results":"45","hashOfConfig":"42"},{"size":3766,"mtime":1605722136590,"results":"46","hashOfConfig":"42"},{"size":5047,"mtime":1610289897164,"results":"47","hashOfConfig":"42"},{"size":3218,"mtime":1610321007322,"results":"48","hashOfConfig":"42"},{"size":2712,"mtime":1602617740314,"results":"49","hashOfConfig":"42"},{"size":3248,"mtime":1605722827848,"results":"50","hashOfConfig":"42"},{"size":1271,"mtime":1602004892056,"results":"51","hashOfConfig":"42"},{"size":5285,"mtime":1605723144287,"results":"52","hashOfConfig":"42"},{"size":6650,"mtime":1605723093451,"results":"53","hashOfConfig":"42"},{"size":1400,"mtime":1614107066990,"results":"54","hashOfConfig":"55"},{"size":449,"mtime":1610279886550,"results":"56","hashOfConfig":"55"},{"size":6986,"mtime":1612557499264,"results":"57","hashOfConfig":"55"},{"size":3806,"mtime":1614102967800,"results":"58","hashOfConfig":"55"},{"size":3788,"mtime":1612557387449,"results":"59","hashOfConfig":"55"},{"size":4721,"mtime":1612557998784,"results":"60","hashOfConfig":"55"},{"size":3047,"mtime":1612557566968,"results":"61","hashOfConfig":"55"},{"size":2710,"mtime":1612463318302,"results":"62","hashOfConfig":"55"},{"size":1277,"mtime":1612462355181,"results":"63","hashOfConfig":"55"},{"size":3036,"mtime":1612556481276,"results":"64","hashOfConfig":"55"},{"size":5366,"mtime":1612462209157,"results":"65","hashOfConfig":"55"},{"size":6489,"mtime":1614102627330,"results":"66","hashOfConfig":"55"},{"size":1597,"mtime":1614108843331,"results":"67","hashOfConfig":"55"},{"size":2756,"mtime":1614106186874,"results":"68","hashOfConfig":"55"},{"size":2590,"mtime":1614109710845,"results":"69","hashOfConfig":"55"},{"size":6701,"mtime":1612557522335,"results":"70","hashOfConfig":"55"},{"size":913,"mtime":1612288868353,"results":"71","hashOfConfig":"55"},{"size":6293,"mtime":1614109680687,"results":"72","hashOfConfig":"55"},{"size":2843,"mtime":1612294798125,"results":"73","hashOfConfig":"55"},{"size":6456,"mtime":1612557692846,"results":"74","hashOfConfig":"55"},{"size":9916,"mtime":1612557551320,"results":"75","hashOfConfig":"55"},{"size":2814,"mtime":1612388083200,"results":"76","hashOfConfig":"55"},{"size":516,"mtime":1614108692225,"results":"77","hashOfConfig":"55"},{"size":1378,"mtime":1612558332109,"results":"78","hashOfConfig":"55"},{"size":4302,"mtime":1612558316564,"results":"79","hashOfConfig":"55"},{"size":5760,"mtime":1612558309775,"results":"80","hashOfConfig":"55"},{"size":479,"mtime":1614108789062,"results":"81","hashOfConfig":"55"},{"size":1804,"mtime":1614109639185,"results":"82","hashOfConfig":"55"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"85","usedDeprecatedRules":"86"},"iafhjt",{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"89","usedDeprecatedRules":"86"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"92","usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"95","usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"101","usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"104","usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"110","usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"113","usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"120","usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"123","usedDeprecatedRules":"124"},"1heku9p",{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"89","usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"129","usedDeprecatedRules":"124"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"132","usedDeprecatedRules":"124"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"135","usedDeprecatedRules":"124"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"138","usedDeprecatedRules":"124"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"141","usedDeprecatedRules":"124"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"144","usedDeprecatedRules":"124"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"147","usedDeprecatedRules":"124"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"150","usedDeprecatedRules":"124"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"153","usedDeprecatedRules":"124"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"156","usedDeprecatedRules":"124"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"165","usedDeprecatedRules":"124"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"174","usedDeprecatedRules":"124"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"177","usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"180","usedDeprecatedRules":"124"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"185","usedDeprecatedRules":"124"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"188","usedDeprecatedRules":"124"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"191","usedDeprecatedRules":"124"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\Routes.jsx",["196"],"﻿import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport Client from '../components/client/Client';\r\nimport Product from '../components/product/Product'\r\nimport Category from '../components/category/Category'\r\nimport Supplier from '../components/supplier/Supplier'\r\nimport Report from '../components/report/Report'\r\nimport Sale from '../components/sale/Sale'\r\nimport Order from '../components/order/Order'\r\nimport Payment from \"./payment/Payment\";\r\nimport Payments from \"./payment/Payments\";\r\nimport NotFoundPage from \"../components/error/NotFoundPage\"\r\nexport default function Routes() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path='/' component={Report} />\r\n            <Route path='/supplier' component={Supplier} />\r\n            <Route path='/category' component={Category} />\r\n            <Route path='/product' component={Product} />\r\n            <Route path='/client' component={Client} />\r\n            <Route path='/order' component={Order} />\r\n            <Route path='/sale/client/:clientId' component={Sale} />\r\n            <Route path='/payment/client/:clientId' component={Payment} />\r\n            <Route path='/payment' component={Payments} />\r\n            <Route path=\"*\" component={NotFoundPage} />\r\n        </Switch>\r\n    )\r\n\r\n}",["197","198"],"C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\error\\NotFoundPage.js",["199"],"﻿import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NotFoundPage() {\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ textAlign: \"center\" }}>\r\n                Desculpe, o recurso solicitado não pôde ser encontrado.\r\n            </h1>\r\n            <p style={{ textAlign: \"center\" }}>\r\n                <Link to=\"/\">Ir para o painel principal</Link>\r\n            </p>\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\client\\Client.jsx",["200"],"﻿import React, { useState } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\n\r\nconst baseURL = \"https://estoquapp.herokuapp.com/api/Client\";\r\n\r\nconst isOk = (response) => {\r\n    if (response !== null && response.ok) {\r\n        return response;\r\n    } else {\r\n        throw Error(response.status);\r\n    }\r\n}\r\n\r\nconst columns =\r\n    [\r\n        { title: \"id\", field: \"id\", hidden: true },\r\n        {\r\n            title: 'Nome', field: 'name', type: 'string',\r\n            validate: (rowData) => ((rowData.name != null && rowData.name.length >= 10 && rowData.name.length <= 50)\r\n                ? true : '⚠️ Nome deve ter entre 10 e 50 caracteres.')\r\n        },\r\n        {\r\n            title: 'Endereço', field: 'address', type: 'string',\r\n            validate: rowData => ((rowData.address != null && rowData.address.length >= 10 && rowData.address.length <= 100)\r\n                ? true : '⚠️ Endereço deve ter entre 10 e 100 caracteres.')\r\n        },\r\n        {\r\n            title: 'Telefone', field: 'phoneNumber', type: 'string',\r\n            validate: rowData => ((rowData.phoneNumber != null && rowData.phoneNumber.length === 11)\r\n                ? true : '⚠️ Número de telefone deve ter 11 dígitos.')\r\n        },\r\n        {\r\n            title: 'Status', field: 'status', lookup: { 0: 'Inativo', 1: 'Ativo' }, editable: 'never'\r\n        },\r\n        {\r\n            title: 'Débito', field: 'debt', type: 'currency', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Última compra', field: 'lastPurchase', type: 'date', editable: 'never'\r\n        },\r\n    ];\r\n\r\nconst localization = {\r\n    body: {\r\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n        addTooltip: 'Adicionar',\r\n        deleteTooltip: 'Apagar',\r\n        editTooltip: 'Editar',\r\n        editRow: {\r\n            deleteText: 'Voulez-vous supprimer cette ligne?',\r\n            cancelTooltip: 'Cancelar',\r\n            saveTooltip: 'Salvar'\r\n        }\r\n    },\r\n    toolbar: {\r\n        searchTooltip: 'Pesquisar',\r\n        searchPlaceholder: 'Pesquisar',\r\n        exportTitle: 'Exportar',\r\n        exportAriaLabel: 'Exportar',\r\n    },\r\n    pagination: {\r\n        labelRowsSelect: 'linhas',\r\n        labelDisplayedRows: '{count} de {from}-{to}',\r\n        firstTooltip: 'Primeira página',\r\n        previousTooltip: 'Página anterior',\r\n        nextTooltip: 'Próxima página',\r\n        lastTooltip: 'Última página'\r\n    },\r\n    header: {\r\n        actions: 'Ações'\r\n    }\r\n}\r\nconst operations = (query, data) => {\r\n    //Searching\r\n    data = data.filter(p =>\r\n        p.name.toLowerCase().includes(query.search.toLowerCase()) ||\r\n        p.address.toLowerCase().includes(query.search.toLowerCase()) ||\r\n        p.phoneNumber.includes(query.search) ||\r\n        p.debt.toString().includes(query.search)\r\n    )\r\n    //Sorting \r\n    if (query.orderBy != null) {\r\n        let orderBy = query.orderBy.field;\r\n        data.sort(function (a, b) {\r\n            if (b[orderBy] < a[orderBy]) {\r\n                return -1;\r\n            }\r\n            if (b[orderBy] > a[orderBy]) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    return data;\r\n};\r\n\r\nexport default function Client(props) {\r\n    const [data, setData] = useState([]);\r\n    const [errorMessages, setErrorMessages] = useState('');\r\n    const [iserror, setIserror] = useState(false);\r\n\r\n\r\n    const handleRowAdd = (newData, resolve) => {\r\n        fetch(baseURL, {\r\n            method: 'Post',\r\n            headers: { 'Content-type': 'application/json' },\r\n            body: JSON.stringify(newData)\r\n        })\r\n            .then(res => isOk(res))\r\n            .then(response => response.json())\r\n            .then(product => {\r\n                let dataToAdd = [...data];\r\n                dataToAdd.push(product);\r\n                setData(dataToAdd);\r\n                resolve()\r\n                setErrorMessages([])\r\n                setIserror(false)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages(`Não foi possível enviar os dados ao servidor. ${error}`)\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n    }\r\n\r\n    const handleRowUpdate = (newData, oldData, resolve) => {\r\n        newData.status = Number(newData.status);\r\n        fetch(baseURL,\r\n            {\r\n                method: 'Put',\r\n                headers: { 'Content-type': 'application/json' },\r\n                body: JSON.stringify(newData)\r\n            })\r\n            .then(res => isOk(res))\r\n            .then(response => response.json())\r\n            .then(product => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = product;\r\n                setData([...dataUpdate]);\r\n                resolve()\r\n                setIserror(false)\r\n                setErrorMessages([])\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages(`Não foi possível atualizar o cliente. ${error}`)\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {iserror &&\r\n                    <Alert severity=\"error\">{errorMessages}</Alert>\r\n                }\r\n            </div>\r\n            <MaterialTable\r\n                title=\"Clientes\"\r\n                columns={columns}\r\n                localization={localization}\r\n                options={{\r\n                    exportButton: true,\r\n                    headerStyle: {\r\n                        backgroundColor: '#01579b',\r\n                        color: '#FFF'\r\n                    }\r\n                }}\r\n                data={query =>\r\n                    new Promise((resolve, reject) => {\r\n                        let url = 'api/Client?'\r\n                        url += 'per_page=' + query.pageSize\r\n                        url += '&page=' + (query.page + 1)\r\n                        fetch(url)\r\n                            .then(response => response.json())\r\n                            .then(result => {\r\n                                resolve({\r\n                                    data: operations(query, result.data),\r\n                                    page: result.page - 1,\r\n                                    totalCount: result.total\r\n                                })\r\n                            }).catch(err => console.log(err))\r\n                    })\r\n                }\r\n                actions={[\r\n                    {\r\n                        icon: () => <AddShoppingCartIcon />,\r\n                        tooltip: 'Nova venda',\r\n                        onClick: (event, rowData) => props.history.push(`/sale/client/${rowData.id}`)\r\n                    }\r\n                    , {\r\n                        icon: () => <PaymentIcon />,\r\n                        tooltip: 'Pagar',\r\n                        onClick: (event, rowData) =>\r\n                            props\r\n                                .history\r\n                                .push(`/payment/client/${rowData.id}`)\r\n                    }\r\n                ]}\r\n                editable={{\r\n                    onRowAdd: newData =>\r\n                        new Promise((resolve) => {\r\n                            handleRowAdd(newData, resolve)\r\n                        }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve) => {\r\n                            handleRowUpdate(newData, oldData, resolve);\r\n                        }),\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\n","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\order\\Order.jsx",["201"],"﻿import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport Items from './Items';\r\n\r\nconst columns =\r\n    [\r\n        { title: \"id\", field: \"id\", hidden: true },\r\n        { title: \"cLientId\", field: \"cLientId\", hidden: true },\r\n        {\r\n            title: 'Cliente', field: 'client.name', type: 'string'\r\n        },\r\n        {\r\n            title: 'Valor', field: 'value', type: 'currency'\r\n        },\r\n        {\r\n            title: 'Status', field: 'status', type: 'numeric',\r\n            lookup: { 0: 'Pago', 1: 'Pendende' }\r\n        },\r\n        {\r\n            title: 'Data', field: 'date', type: 'date'\r\n        },\r\n    ];\r\n\r\nconst localization = {\r\n    body: {\r\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n        addTooltip: 'Adicionar',\r\n        deleteTooltip: 'Apagar',\r\n        editTooltip: 'Editar',\r\n        editRow: {\r\n            deleteText: 'Voulez-vous supprimer cette ligne?',\r\n            cancelTooltip: 'Cancelar',\r\n            saveTooltip: 'Salvar'\r\n        }\r\n    },\r\n    toolbar: {\r\n        searchTooltip: 'Pesquisar',\r\n        searchPlaceholder: 'Pesquisar',\r\n        exportTitle: 'Exportar',\r\n        exportAriaLabel: 'Exportar',\r\n    },\r\n    pagination: {\r\n        labelRowsSelect: 'linhas',\r\n        labelDisplayedRows: '{count} de {from}-{to}',\r\n        firstTooltip: 'Primeira página',\r\n        previousTooltip: 'Página anterior',\r\n        nextTooltip: 'Próxima página',\r\n        lastTooltip: 'Última página'\r\n    },\r\n    header: {\r\n        actions: 'Ações'\r\n    }\r\n}\r\nconst operations = (query, data) => {\r\n    //Searching      \r\n    data = data.filter(o =>        \r\n        o.client.name.toLowerCase().includes(query.search.toLowerCase()) ||\r\n        o.value.toString().includes(query.search) ||        \r\n        new Date(o.date).toLocaleDateString().includes(query.search)\r\n    )\r\n    //Sorting \r\n    if (query.orderBy != null) {\r\n        let orderBy = query.orderBy.field;\r\n        data.sort(function (a, b) {\r\n            if (b[orderBy] < a[orderBy]) {\r\n                return -1;\r\n            }\r\n            if (b[orderBy] > a[orderBy]) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    return data;\r\n};\r\n\r\nexport default function Order(props) {\r\n\r\n    return (\r\n        <MaterialTable\r\n            title=\"Pedidos\"\r\n            columns={columns}\r\n            localization={localization}\r\n            options={{\r\n                exportButton: true,\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                }\r\n            }}\r\n            data={query =>\r\n                new Promise((resolve, reject) => {\r\n                    let url = 'https://estoquapp.herokuapp.com/api/Order?'\r\n                    url += 'per_page=' + query.pageSize\r\n                    url += '&page=' + (query.page + 1)\r\n                    fetch(url)\r\n                        .then(response => response.json())\r\n                        .then(result => {\r\n                            resolve({\r\n                                data: operations(query, result.data),\r\n                                page: result.page - 1,\r\n                                totalCount: result.total\r\n                            })\r\n                        }).catch(err => console.log(err))\r\n                })\r\n            }\r\n            actions={[\r\n                {\r\n                    icon: () => <PaymentIcon />,\r\n                    tooltip: 'Pagar',\r\n                    onClick: (event, rowData) =>\r\n                        props\r\n                            .history\r\n                            .push(`/payment/client/${rowData.cLientId}`)\r\n                }\r\n            ]}\r\n            detailPanel={rowData => {\r\n                return (\r\n                    <Items orderId={rowData.id} />\r\n                )\r\n            }}\r\n        />\r\n\r\n    )\r\n};\r\n\r\n","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\Sale.jsx",["202"],"﻿import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport { TableItem } from './TableItem';\r\nimport { TabItem } from './TabItem';\r\n\r\nconst baseURL = \"api/Order\";\r\n\r\nconst isOk = (response) => {\r\n    if (response !== null && response.ok) {\r\n        return response;\r\n    } else {\r\n        throw Error(response.status);\r\n    }\r\n}\r\n\r\n\r\nexport default function Sale(props) {\r\n    const [errorMessages, setErrorMessages] = useState('');\r\n    const [successMessages, setSuccessMessages] = useState('');\r\n    const [iserror, setIserror] = useState(false);\r\n    const [ismessage, setIsmessage] = useState(false);\r\n    const [products, setProducts] = useState([]);\r\n    const clientId = props.match.params.clientId;\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }));\r\n\r\n    const onAdd = (product) => {\r\n        setProducts([...products, product]);\r\n    }\r\n\r\n    const handleSaveItems = () => {\r\n        if (products.length === 0) {\r\n            setErrorMessages(`Erro. Pedido deve ter ao menos um item.`);\r\n            setIserror(true);\r\n        } else {\r\n            let order = {\r\n                clientId: Number(clientId),\r\n                items: products.map(p => ({ 'ProductId': Number(p.productid), 'Quantity': Number(p.quantity) }))\r\n            }\r\n            fetch(baseURL, {\r\n                method: 'Post',\r\n                headers: { 'Content-type': 'application/json' },\r\n                body: JSON.stringify(order)\r\n            })\r\n                .then(response => isOk(response))\r\n                .then(response => response.json())\r\n                .then(result => {                    \r\n                    setProducts([]);\r\n                    setErrorMessages([]);\r\n                    setSuccessMessages(`Pedido registrado com sucesso!. ${result.status}`);\r\n                    setIserror(false);\r\n                    setIsmessage(true);\r\n                }).catch(error => {\r\n                    setErrorMessages(`Não foi possível enviar os dados para o servidor. ${error}`);\r\n                    setIserror(true);\r\n                });\r\n        }\r\n\r\n    }\r\n    const handleRowUpdate = (newData, oldData, resolve) => {\r\n        let objIndex = products.findIndex(p => p.code === oldData.code);\r\n        let productscopy = [...products];\r\n        productscopy[objIndex] = newData;\r\n        setProducts(productscopy);\r\n        resolve();\r\n    }\r\n\r\n    const handleRowDelete = (oldData, resolve) => {\r\n        let newproducts = products.filter(p => p.code !== oldData.code);\r\n        setProducts(newproducts);\r\n        resolve();\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (<>\r\n        <div>\r\n            {iserror &&\r\n                <Alert severity=\"error\">{errorMessages}</Alert>\r\n            }\r\n            {ismessage &&\r\n                <Alert severity=\"success\">{successMessages}</Alert>\r\n            }\r\n\r\n        </div>\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={8}>\r\n                    <TableItem products={products}\r\n                        onRowUpdate={handleRowUpdate}\r\n                        onRowDelete={handleRowDelete}\r\n                        onSaveItems={handleSaveItems}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TabItem onAdd={onAdd} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    </>\r\n    );\r\n\r\n};\r\n\r\n\r\n\r\n","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\payment\\Payment.jsx",["203"],"﻿import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst URL = \"https://estoquapp.herokuapp.com/api/Payment\";\r\n\r\nconst useInputStyles = makeStyles((theme) => ({\r\n    text: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '40ch',\r\n        },\r\n    },\r\n    button: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nexport default function Payment(props) {\r\n\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [amount, setAmount] = useState('');\r\n    const [value, setValue] = useState('');\r\n    const [valueerror, setValueError] = useState({ value: { valid: true, text: \"\" } });\r\n    const [errorMessages, setErrorMessages] = useState('');\r\n    const [successMessages, setSuccessMessages] = useState('');\r\n    const [iserror, setIserror] = useState(false);\r\n    const [ismessage, setIsmessage] = useState(false);\r\n\r\n    const clientId = props.match.params.clientId;\r\n\r\n    const inputStyles = useInputStyles();\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        let payment = {\r\n            clientId: Number(clientId),\r\n            value: Number(value)\r\n        }\r\n\r\n        fetch(URL, {\r\n            method: 'Post',\r\n            headers: { 'Content-type': 'application/json' },\r\n            body: JSON.stringify(payment)\r\n        })\r\n            .then(res => isOk(res))\r\n            .then(response => response.json())\r\n            .then(payment => {\r\n                console.log(payment);\r\n                setAmount(amount - value);\r\n                setValue('');\r\n                setSuccessMessages('Pagamento enviado com sucesso!')\r\n                setIsmessage(true);\r\n                setErrorMessages('');\r\n                setIserror(false)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([`Não foi possível enviar os dados ao servidor. ${error}`])\r\n                setIserror(true);\r\n                setSuccessMessages('');\r\n                setIsmessage(false);\r\n            })\r\n\r\n    }\r\n\r\n    const isOk = (response) => {\r\n        if (response !== null && response.ok) {\r\n            return response;\r\n        } else {\r\n            throw new Error(response.statusText);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        /*The last line with an array is necessary or You'll get a \r\n         * 'React Hook useEffect has a missing dependency: 'props.orderId'. \r\n         * Either include it or remove the dependency array.'*/\r\n        fetch(`${URL}/${clientId}`)\r\n            .then(res => isOk(res))\r\n            .then(response => response.json())\r\n            .then(data => { setAmount(data.debt) })\r\n            .catch(err => console.log(err));\r\n    }, [clientId]);\r\n\r\n    useEffect(() => {\r\n        if (value <= 0 || value > amount) {\r\n            setDisabled(true);\r\n        } else {\r\n            setDisabled(false);\r\n        }\r\n    }, [value, amount]);\r\n    return (\r\n        <>\r\n            <div>\r\n                {iserror &&\r\n                    <Alert severity=\"error\">{errorMessages}</Alert>\r\n                }\r\n                {ismessage &&\r\n                    <Alert severity=\"success\">{successMessages}</Alert>\r\n                }\r\n\r\n            </div>\r\n            <form className={inputStyles.text} autoComplete=\"off\" onSubmit={onSubmit}>\r\n                <TextField\r\n                    disabled id=\"amount\"\r\n                    value={amount}\r\n                    label=\"Total\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                    required type=\"number\"\r\n                    id=\"valut\"\r\n                    label=\"Valor\"\r\n                    variant=\"outlined\"\r\n                    value={value}\r\n                    error={!valueerror.value.valid}\r\n                    helperText={valueerror.value.text}\r\n                    onChange={(event) => {\r\n                        let v = event.target.value;\r\n                        if (v <= 0 || v > amount) {\r\n                            setValueError(\r\n                                {\r\n                                    value:\r\n                                    {\r\n                                        valid: false,\r\n                                        text: `O valor precisa ser maior que 0 e menor que ${amount}`\r\n                                    }\r\n                                });\r\n                        } else {\r\n                            setValueError({ value: { valid: true, text: \"\" } });\r\n                        }\r\n                        setValue(v);\r\n                    }}\r\n                />\r\n\r\n                <div className={inputStyles.button}>\r\n                    <Button disabled={disabled} type=\"submit\" variant=\"contained\" color=\"primary\">Debitar</Button>\r\n                </div>\r\n            </form>\r\n        </>);\r\n\r\n}","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\payment\\Payments.jsx",["204"],"﻿import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nlet URL = \"https://estoquapp.herokuapp.com/api/Payment?\";\r\n\r\nconst columns =\r\n    [\r\n        { title: \"id\", field: \"id\", hidden: true },\r\n        {\r\n            title: 'Cliente', field: 'client.name', type: 'string', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Valor', field: 'amount', type: 'currency', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Data', field: 'date', type: 'date', editable: 'never'\r\n        },\r\n    ];\r\n\r\nconst localization = {\r\n    body: {\r\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n        addTooltip: 'Adicionar',\r\n        deleteTooltip: 'Apagar',\r\n        editTooltip: 'Editar',\r\n        editRow: {\r\n            deleteText: 'Voulez-vous supprimer cette ligne?',\r\n            cancelTooltip: 'Cancelar',\r\n            saveTooltip: 'Salvar'\r\n        }\r\n    },\r\n    toolbar: {\r\n        searchTooltip: 'Pesquisar',\r\n        searchPlaceholder: 'Pesquisar',\r\n        exportTitle: 'Exportar',\r\n        exportAriaLabel: 'Exportar',\r\n    },\r\n    pagination: {\r\n        labelRowsSelect: 'linhas',\r\n        labelDisplayedRows: '{count} de {from}-{to}',\r\n        firstTooltip: 'Primeira página',\r\n        previousTooltip: 'Página anterior',\r\n        nextTooltip: 'Próxima página',\r\n        lastTooltip: 'Última página'\r\n    },\r\n    header: {\r\n        actions: 'Ações'\r\n    }\r\n}\r\n\r\nconst operations = (query, data) => {\r\n    //Searching\r\n    data = data.filter(p =>\r\n        p.client.name.toLowerCase().includes(query.search.toLowerCase()) ||\r\n        p.amount.toString().includes(query.search) ||\r\n        new Date(p.date).toLocaleDateString().includes(query.search)\r\n    )\r\n    //Sorting \r\n    if (query.orderBy != null) {\r\n        let orderBy = query.orderBy.field;\r\n        data.sort(function (a, b) {\r\n            if (b[orderBy] < a[orderBy]) {\r\n                return -1;\r\n            }\r\n            if (b[orderBy] > a[orderBy]) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    return data;\r\n};\r\n\r\nexport default function Client(props) {\r\n    return (\r\n        <MaterialTable\r\n            title=\"Pagamentos\"\r\n            columns={columns}\r\n            localization={localization}\r\n            options={{\r\n                exportButton: true,\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                }\r\n            }}\r\n            data={query =>\r\n                new Promise((resolve, reject) => {                    \r\n                    URL += 'per_page=' + query.pageSize\r\n                    URL += '&page=' + (query.page + 1)\r\n                    fetch(URL)\r\n                        .then(response => response.json())\r\n                        .then(result => {\r\n                            resolve({\r\n                                data: operations(query, result.data),\r\n                                page: result.page - 1,\r\n                                totalCount: result.total\r\n                            })\r\n                        }).catch(err => console.log(err))\r\n                })\r\n            }\r\n        />\r\n    )\r\n};\r\n\r\n","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\TableItem.jsx",["205"],"﻿import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\n\r\nconst columns =\r\n    [\r\n        { title: \"id\", field: \"productid\", hidden: true },\r\n        {\r\n            title: 'Produto', field: 'description', type: 'string', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Valor', field: 'price', type: 'currency', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Quantidade', field: 'quantity', type: 'numeric',\r\n            validate: rowData => rowData.quantity <= 0 ? '⚠️ Quantidade não pode ser menor que zero' : ''\r\n        },\r\n        {\r\n            title: 'SubTotal', field: 'subtotal', type: 'currency', editable: 'never'\r\n        }\r\n    ];\r\n\r\nconst localization = {\r\n    body: {\r\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n        addTooltip: 'Adicionar',\r\n        deleteTooltip: 'Apagar',\r\n        editTooltip: 'Editar',\r\n        editRow: {\r\n            deleteText: 'Deseja apagar este item?',\r\n            cancelTooltip: 'Cancelar',\r\n            saveTooltip: 'Salvar'\r\n        }\r\n    },\r\n    toolbar: {\r\n        searchTooltip: 'Pesquisar',\r\n        searchPlaceholder: 'Pesquisar',\r\n        exportTitle: 'Exportar',\r\n        exportAriaLabel: 'Exportar',\r\n    },\r\n    pagination: {\r\n        labelRowsSelect: 'linhas',\r\n        labelDisplayedRows: '{count} de {from}-{to}',\r\n        firstTooltip: 'Primeira página',\r\n        previousTooltip: 'Página anterior',\r\n        nextTooltip: 'Próxima página',\r\n        lastTooltip: 'Última página'\r\n    },\r\n    header: {\r\n        actions: 'Ações'\r\n    }\r\n}\r\n\r\n\r\nexport function TableItem(props) {\r\n\r\n    return (\r\n        <MaterialTable\r\n            title=\"Itens\"\r\n            columns={columns}\r\n            localization={localization}\r\n            data={props.products}\r\n            options={{\r\n                exportButton: true,\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                }\r\n            }}\r\n            actions={[\r\n                {\r\n                    icon: 'save',\r\n                    tooltip: 'Salvar items',\r\n                    isFreeAction: true,\r\n                    onClick: (event) => { props.onSaveItems() }\r\n                }\r\n            ]}\r\n            editable={{\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve) => {\r\n                        props.onRowUpdate(newData, oldData, resolve);\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        props.onRowDelete(oldData, resolve);\r\n                    }),\r\n            }}\r\n        />\r\n    )\r\n}","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\order\\Items.jsx",["206"],"﻿import React, { useEffect } from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#01579b',\r\n        color: '#FFF'\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nconst isOk = (response) => {\r\n    if (response !== null && response.ok) {\r\n        return response;\r\n    } else {\r\n        throw Error(response.status);\r\n    }\r\n}\r\nexport default function Items(props) {\r\n    const classes = useStyles();\r\n    const [items, setItems] = React.useState([]);\r\n\r\n    useEffect(() => {\r\n    /*The last line with an array is necessary or You'll get a\r\n     * 'React Hook useEffect has a missing dependency: 'props.orderId'.\r\n     * Either include it or remove the dependency array.'*/\r\n        fetch(`/api/Item/${props.orderId}`)\r\n            .then(res => isOk(res))\r\n            .then(response => response.json())\r\n            .then(data => { setItems(data) })\r\n            .catch(err => console.log(err));\r\n    }, [props.orderId]);\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} size=\"small\" aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Produto</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Quantidade</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Preço</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Desconto</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Subtotal</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {items.map((item) => (\r\n                        <StyledTableRow key={item.id}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {item.product.description}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{item.quantity}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{item.value}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{item.discound}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{item.value * item.quantity}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\TabItem.jsx",["207"],"﻿import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { ManualTabPanel } from '../sale/ManualTabPanel'\r\nimport { AutomaticTabPanel } from '../sale/AutomaticTabPanel'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport function TabItem(props) {\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={selectedTab} onChange={handleTabChange} aria-label=\"simple tabs example\">\r\n                    <Tab label=\"Busca automática\" />\r\n                    <Tab label=\"Busca manual\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            {selectedTab === 0 && <AutomaticTabPanel onAdd={props.onAdd} />}\r\n            {selectedTab === 1 && <ManualTabPanel onAdd={props.onAdd} />}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\AutomaticTabPanel.jsx",["208"],"﻿import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '40ch',\r\n        },\r\n    },\r\n    button: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nexport function AutomaticTabPanel(props) {\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [productid, setProductid] = useState('');\r\n    const [code, setCode] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [quantity, setQuantity] = useState('');\r\n    const [quantityAvailable, setQuantityAvailable] = useState('');\r\n    const [codeerror, setCodeError] = useState({ code: { valid: true, text: \"\" } });\r\n    const [quantityerror, setQuantityErrors] = useState({ quantity: { valid: true, text: \"\" } });\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (code.length === 0 || description.length === 0 || quantity <= 0 || quantity > quantityAvailable) {\r\n            setDisabled(true);\r\n        } else {\r\n            setDisabled(false);\r\n        }\r\n    }, [code.length, description.length, quantity, quantityAvailable]);\r\n\r\n    const isOk = (response) => {\r\n        if (response !== null && response.ok) {\r\n            return response;\r\n        } else {\r\n            throw new Error(response.statusText);\r\n        }\r\n    }\r\n\r\n    const onClick = () => {\r\n        //7896591527269\r\n        return fetch(`api/Product/Code?code=${code}`, { method: 'GET' })\r\n            .then(res => isOk(res))\r\n            .then(res => res.json())\r\n            .then((product) => {\r\n                setProductid(product.id);\r\n                setDescription(product.description);\r\n                setPrice(product.salePrice);\r\n                setQuantityAvailable(product.quantity);\r\n            })\r\n            .catch(err => { console.log(err) });\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.onAdd({ productid, code, description, price, quantity, subtotal: price * quantity });\r\n\r\n        setProductid('');\r\n        setCode('');\r\n        setDescription('');\r\n        setPrice('');\r\n        setQuantity('');\r\n        setQuantityAvailable('');\r\n    }\r\n\r\n    return (\r\n        <form className={classes.text} autoComplete=\"off\"\r\n            onSubmit={onSubmit}>\r\n\r\n            <TextField\r\n                fullWidth required\r\n                id=\"code\"\r\n                value={code}\r\n                label=\"Código\"\r\n                variant=\"outlined\"\r\n                error={!codeerror.code.valid}\r\n                helperText={codeerror.code.text}\r\n                onChange={(event) => {\r\n                    let c = event.target.value;\r\n                    if (c.length < 9 || c.length > 13) {\r\n                        setCodeError(\r\n                            {\r\n                                code:\r\n                                {\r\n                                    valid: false,\r\n                                    text: \"O código precisa ter entre 9 e 13 dígitos.\"\r\n                                }\r\n                            });\r\n                    } else {\r\n                        setCodeError({ code: { valid: true, text: \"\" } });\r\n                    }\r\n                    setCode(c);\r\n                }}\r\n            />\r\n            <TextField\r\n                disabled id=\"description\"\r\n                value={description}\r\n                label=\"Descrição\"\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                disabled id=\"price\"\r\n                value={price}\r\n                label=\"Preço\"\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                required type=\"number\"\r\n                id=\"quantity\"\r\n                label=\"Quantidade\"\r\n                variant=\"outlined\"\r\n                value={quantity}\r\n                error={!quantityerror.quantity.valid}\r\n                helperText={quantityerror.quantity.text}\r\n                onChange={(event) => {\r\n                    let q = event.target.value;\r\n                    if (q <= 0 || q > quantityAvailable) {\r\n                        setQuantityErrors(\r\n                            {\r\n                                quantity:\r\n                                {\r\n                                    valid: false,\r\n                                    text: `A quantidade precisa ser maior que 0 e menor que ${quantityAvailable}`\r\n                                }\r\n                            });\r\n                    } else {\r\n                        setQuantityErrors({ quantity: { valid: true, text: \"\" } });\r\n                    }\r\n                    setQuantity(q);\r\n                }}\r\n            />\r\n\r\n            <div className={classes.button}>\r\n                <Button variant=\"contained\" onClick={onClick}>Buscar</Button>\r\n                <Button disabled={disabled} type=\"submit\" variant=\"contained\" color=\"primary\">Adicionar</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}",["209","210"],"C:\\Users\\Renan\\source\\repos\\stock-front-end\\src\\components\\sale\\ManualTabPanel.jsx",["211"],"﻿import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useSelectStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        width: '40ch',\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst useInputStyles = makeStyles((theme) => ({\r\n    text: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '40ch',\r\n        },\r\n    },\r\n    button: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n}));\r\n\r\nexport function ManualTabPanel(props) {\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [categories, setCategories] = useState([]);\r\n    const [products, setProducts] = React.useState([]);\r\n    const [currentCategory, setcurrentCategory] = useState('');\r\n    const [currentProduct, setcurrentProduct] = React.useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [quantity, setQuantity] = useState('');\r\n    const [quantityAvailable, setQuantityAvailable] = useState('');\r\n    const [quantityerror, setQuantityErrors] = useState({ quantity: { valid: true, text: \"\" } });\r\n\r\n    const handleCategoryChange = (event) => {\r\n        let categoryId = event.target.value;\r\n        setcurrentCategory(categoryId)\r\n        fetch(`api/Product/ByCategory?id=${categoryId}`)\r\n            .then(res => isOk(res))\r\n            .then(response => response.json())\r\n            .then(data => { setProducts(data) })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const handleProductChange = (event) => {\r\n        let productId = event.target.value;\r\n        setcurrentProduct(productId)\r\n        let p = products.find(p => p.id === productId);\r\n        setPrice(p.salePrice);\r\n        setQuantityAvailable(p.quantity);\r\n    };\r\n\r\n    const selectStyles = useSelectStyles();\r\n    const inputStyles = useInputStyles();\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        let p = products.find(p => p.id === currentProduct)\r\n        let productid = p.id;\r\n        let description = p.description;\r\n        setcurrentProduct('')\r\n        setPrice('');\r\n        setQuantity('');\r\n        setQuantityAvailable('');\r\n        props.onAdd({ productid, description, price, quantity, subtotal: price * quantity });\r\n    }\r\n\r\n    const isOk = (response) => {\r\n        if (response !== null && response.ok) {\r\n            return response;\r\n        } else {\r\n            throw new Error(response.statusText);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch('/api/Category/All')\r\n            .then(res => isOk(res))\r\n            .then(response => response.json())\r\n            .then(data => { setCategories(data) })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        /*React Hook useEffect contains a call to 'setDisabled'.\r\n         * Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, \r\n         * pass [currentCategory.length, currentProduct.length, quantity, quantityAvailable] as a second \r\n         * argument to the useEffect Hook  react-hooks/exhaustive-deps*/\r\n        if (currentCategory.length === 0 || currentProduct.length === 0 || quantity <= 0 || quantity > quantityAvailable) {\r\n            setDisabled(true);\r\n        } else {\r\n            setDisabled(false);\r\n        }\r\n    }, [currentCategory.length, currentProduct.length, quantity, quantityAvailable]);\r\n\r\n    return (\r\n        <form className={inputStyles.text} autoComplete=\"off\"\r\n            onSubmit={onSubmit}>\r\n            <FormControl variant=\"outlined\" className={selectStyles.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Categoria</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={currentCategory}\r\n                    onChange={handleCategoryChange}\r\n                >\r\n                    {categories.map((category) =>\r\n                        <MenuItem value={category.id}>{category.title}</MenuItem>\r\n                    )}\r\n\r\n                </Select>\r\n            </FormControl>\r\n            <FormControl variant=\"outlined\" className={selectStyles.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Produto</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={currentProduct}\r\n                    onChange={handleProductChange}\r\n                >\r\n                    {products.map((product) =>\r\n                        <MenuItem value={product.id}>{product.description}</MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n            <TextField\r\n                disabled id=\"price\"\r\n                value={price}\r\n                label=\"Preço\"\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                required type=\"number\"\r\n                id=\"quantity\"\r\n                label=\"Quantidade\"\r\n                variant=\"outlined\"\r\n                value={quantity}\r\n                error={!quantityerror.quantity.valid}\r\n                helperText={quantityerror.quantity.text}\r\n                onChange={(event) => {\r\n                    let q = event.target.value;\r\n                    if (q <= 0 || q > quantityAvailable) {\r\n                        setQuantityErrors(\r\n                            {\r\n                                quantity:\r\n                                {\r\n                                    valid: false,\r\n                                    text: `A quantidade precisa ser maior que 0 e menor que ${quantityAvailable}`\r\n                                }\r\n                            });\r\n                    } else {\r\n                        setQuantityErrors({ quantity: { valid: true, text: \"\" } });\r\n                    }\r\n                    setQuantity(q);\r\n                }}\r\n            />\r\n\r\n            <div className={inputStyles.button}>\r\n                <Button disabled={disabled} type=\"submit\" variant=\"contained\" color=\"primary\">Adicionar</Button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\Routes.jsx",["212"],"﻿import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Login from '../components/auth/Login';\r\nimport Client from '../components/client/Client';\r\nimport Product from '../components/product/Product'\r\nimport Category from '../components/category/Category'\r\nimport Supplier from '../components/supplier/Supplier'\r\nimport Report from '../components/report/Report'\r\nimport Sale from '../components/sale/Sale'\r\nimport Order from '../components/order/Order'\r\nimport Payment from \"./payment/Payment\";\r\nimport Payments from \"./payment/Payments\";\r\nimport NotFoundPage from \"../components/error/NotFoundPage\"\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path='/' component={Report} />\r\n            <Route path='/login' component={Login} />\r\n            <Route path='/supplier' component={Supplier} />\r\n            <Route path='/category' component={Category} />\r\n            <Route path='/product' component={Product} />\r\n            <Route path='/client' component={Client} />\r\n            <Route path='/order' component={Order} />\r\n            <Route path='/sale/client/:clientId' component={Sale} />\r\n            <Route path='/payment/client/:clientId' component={Payment} />\r\n            <Route path='/payment' component={Payments} />\r\n            <Route path=\"*\" component={NotFoundPage} />\r\n        </Switch>\r\n    )\r\n\r\n}",["213","214"],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\error\\NotFoundPage.js",["215"],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\client\\Client.jsx",["216"],"﻿import React, { useState } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport Api from '../../services/Api'\r\nimport { isPhoneNumberValid, isNameValid, isAddressValid } from '../../validators/Validator'\r\n\r\n\r\nconst columns =\r\n    [\r\n        { title: \"id\", field: \"id\", hidden: true },\r\n        {\r\n            title: 'Nome', field: 'name', type: 'string',\r\n            validate: (rowData) => ((rowData.name != null && isNameValid(rowData.name))\r\n                ? true : '⚠️ Nome deve ter entre 5 e 50 caracteres.')\r\n        },\r\n        {\r\n            title: 'Endereço', field: 'address', type: 'string',\r\n            validate: rowData => ((rowData.address != null && isAddressValid(rowData.address))\r\n                ? true : '⚠️ Endereço deve ter entre 10 e 100 caracteres.')\r\n        },\r\n        {\r\n            title: 'Telefone', field: 'phoneNumber', type: 'string',\r\n            validate: rowData => ((rowData.phoneNumber != null && isPhoneNumberValid(rowData.phoneNumber))\r\n                ? true : '⚠️ O número deve deve estar no formato: (xx)xxxxx-xxxx.')\r\n        },\r\n        {\r\n            title: 'Status', field: 'status', lookup: { 0: 'Inativo', 1: 'Ativo' }, editable: 'never'\r\n        },\r\n        {\r\n            title: 'Débito', field: 'debt', type: 'currency', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Última compra', field: 'lastPurchase', type: 'date', editable: 'never'\r\n        },\r\n    ];\r\n\r\nconst localization = {\r\n    body: {\r\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n        addTooltip: 'Adicionar',\r\n        deleteTooltip: 'Apagar',\r\n        editTooltip: 'Editar',\r\n        editRow: {\r\n            deleteText: 'Voulez-vous supprimer cette ligne?',\r\n            cancelTooltip: 'Cancelar',\r\n            saveTooltip: 'Salvar'\r\n        }\r\n    },\r\n    toolbar: {\r\n        searchTooltip: 'Pesquisar',\r\n        searchPlaceholder: 'Pesquisar',\r\n        exportTitle: 'Exportar',\r\n        exportAriaLabel: 'Exportar',\r\n    },\r\n    pagination: {\r\n        labelRowsSelect: 'linhas',\r\n        labelDisplayedRows: '{count} de {from}-{to}',\r\n        firstTooltip: 'Primeira página',\r\n        previousTooltip: 'Página anterior',\r\n        nextTooltip: 'Próxima página',\r\n        lastTooltip: 'Última página'\r\n    },\r\n    header: {\r\n        actions: 'Ações'\r\n    }\r\n}\r\nconst operations = (query, data) => {\r\n    //Searching\r\n    data = data.filter(p =>\r\n        p.name.toLowerCase().includes(query.search.toLowerCase()) ||\r\n        p.address.toLowerCase().includes(query.search.toLowerCase()) ||\r\n        p.phoneNumber.includes(query.search) ||\r\n        p.debt.toString().includes(query.search)\r\n    )\r\n    //Sorting \r\n    if (query.orderBy != null) {\r\n        let orderBy = query.orderBy.field;\r\n        data.sort(function (a, b) {\r\n            if (b[orderBy] < a[orderBy]) {\r\n                return -1;\r\n            }\r\n            if (b[orderBy] > a[orderBy]) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    return data;\r\n};\r\n\r\nexport default function Client(props) {\r\n    const [data, setData] = useState([]);\r\n    const [errorMessages, setErrorMessages] = useState('');\r\n    const [iserror, setIserror] = useState(false);\r\n\r\n\r\n    const handleRowAdd = (newData, resolve) => {\r\n        new Api('Client').Post(newData)\r\n            .then(product => {\r\n                let dataToAdd = [...data];\r\n                dataToAdd.push(product);\r\n                setData(dataToAdd);\r\n                resolve()\r\n                setErrorMessages([])\r\n                setIserror(false)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages(`Não foi possível enviar os dados ao servidor. ${error}`)\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n    }\r\n\r\n    const handleRowUpdate = (newData, oldData, resolve) => {\r\n        newData.status = Number(newData.status);\r\n        let api = new Api('Client');\r\n        api.Put(newData).then(product => {\r\n            const dataUpdate = [...data];\r\n            const index = oldData.tableData.id;\r\n            dataUpdate[index] = product;\r\n            setData([...dataUpdate]);\r\n            resolve()\r\n            setIserror(false)\r\n            setErrorMessages([])\r\n        })\r\n            .catch(error => {\r\n                setErrorMessages(`Não foi possível atualizar o cliente. ${error}`)\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {iserror &&\r\n                    <Alert severity=\"error\">{errorMessages}</Alert>\r\n                }\r\n            </div>\r\n            <MaterialTable\r\n                title=\"Clientes\"\r\n                columns={columns}\r\n                localization={localization}\r\n                options={{\r\n                    exportButton: true,\r\n                    headerStyle: {\r\n                        backgroundColor: '#01579b',\r\n                        color: '#FFF'\r\n                    }\r\n                }}\r\n                data={query =>\r\n                    new Promise((resolve, reject) => {\r\n                        let api = new Api('Client?');\r\n                        api.Get(query.pageSize, query.page)\r\n                            .then(result => {\r\n                                resolve({\r\n                                    data: operations(query, result.data),\r\n                                    page: result.page - 1,\r\n                                    totalCount: result.total\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n                actions={[\r\n                    {\r\n                        icon: () => <AddShoppingCartIcon />,\r\n                        tooltip: 'Nova venda',\r\n                        onClick: (event, rowData) => props.history.push(`/sale/client/${rowData.id}`)\r\n                    }\r\n                    , {\r\n                        icon: () => <PaymentIcon />,\r\n                        tooltip: 'Pagar',\r\n                        onClick: (event, rowData) =>\r\n                            props\r\n                                .history\r\n                                .push(`/payment/client/${rowData.id}`)\r\n                    }\r\n                ]}\r\n                editable={{\r\n                    onRowAdd: newData =>\r\n                        new Promise((resolve) => {\r\n                            handleRowAdd(newData, resolve)\r\n                        }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve) => {\r\n                            handleRowUpdate(newData, oldData, resolve);\r\n                        }),\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\n","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\Sale.jsx",["217"],"﻿import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Api from '../../services/Api'\r\n\r\nimport { TableItem } from './TableItem';\r\nimport { TabItem } from './TabItem';\r\n\r\n\r\n\r\nexport default function Sale(props) {\r\n    const [errorMessages, setErrorMessages] = useState('');\r\n    const [successMessages, setSuccessMessages] = useState('');\r\n    const [iserror, setIserror] = useState(false);\r\n    const [ismessage, setIsmessage] = useState(false);\r\n    const [products, setProducts] = useState([]);\r\n    const clientId = props.match.params.clientId;\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }));\r\n\r\n    const onAdd = (product) => {\r\n        if (products.length === 0) {\r\n            setProducts([...products, product]);\r\n        } else {\r\n            for (let index = 0; index < products.length; index++) {\r\n                if (product.productid === products[index].productid) {\r\n                    setErrorMessages('Erro. Produto já está na lista de itens.');\r\n                    setIserror(true);\r\n                    return;\r\n                }\r\n                setProducts([...products, product]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSaveItems = () => {\r\n        if (products.length === 0) {\r\n            setErrorMessages(`Erro. Pedido deve ter ao menos um item.`);\r\n            setIserror(true);\r\n        } else {\r\n            let order = {\r\n                clientId: Number(clientId),\r\n                items: products.map(p => ({ 'ProductId': Number(p.productid), 'Quantity': Number(p.quantity) }))\r\n            }\r\n                     \r\n            new Api('Order').Post(order)\r\n                .then(result => {\r\n                    setProducts([]);\r\n                    setErrorMessages([]);\r\n                    setSuccessMessages('Pedido registrado com sucesso!.');\r\n                    setIserror(false);\r\n                    setIsmessage(true);\r\n                }).catch(error => {\r\n                    setErrorMessages(`Não foi possível enviar os dados para o servidor. ${error}`);\r\n                    setIserror(true);\r\n                });\r\n        }\r\n\r\n    }\r\n    const handleRowUpdate = (newData, oldData, resolve) => {\r\n        let objIndex = products.findIndex(p => p.code === oldData.code);\r\n        let productscopy = [...products];\r\n        productscopy[objIndex] = newData;\r\n        setProducts(productscopy);\r\n        resolve();\r\n    }\r\n\r\n    const handleRowDelete = (oldData, resolve) => {\r\n        let newproducts = products.filter(p => p.productid !== oldData.productid);\r\n        setProducts(newproducts);\r\n        resolve();\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (<>\r\n        <div>\r\n            {iserror &&\r\n                <Alert severity=\"error\">{errorMessages}</Alert>\r\n            }\r\n            {ismessage &&\r\n                <Alert severity=\"success\">{successMessages}</Alert>\r\n            }\r\n\r\n        </div>\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={8}>\r\n                    <TableItem products={products}\r\n                        onRowUpdate={handleRowUpdate}\r\n                        onRowDelete={handleRowDelete}\r\n                        onSaveItems={handleSaveItems}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TabItem onAdd={onAdd} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    </>\r\n    );\r\n\r\n};\r\n\r\n\r\n\r\n","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\order\\Order.jsx",["218"],"﻿import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport Items from './Items';\r\nimport Api from '../../services/Api'\r\n\r\nconst columns =\r\n    [\r\n        { title: \"id\", field: \"id\", hidden: true },\r\n        { title: \"cLientId\", field: \"cLientId\", hidden: true },\r\n        {\r\n            title: 'Cliente', field: 'client.name', type: 'string'\r\n        },\r\n        {\r\n            title: 'Valor', field: 'value', type: 'currency'\r\n        },\r\n        {\r\n            title: 'Status', field: 'status', type: 'numeric',\r\n            lookup: { 0: 'Pago', 1: 'Pendende' }\r\n        },\r\n        {\r\n            title: 'Data', field: 'date', type: 'date'\r\n        },\r\n    ];\r\n\r\nconst localization = {\r\n    body: {\r\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n        addTooltip: 'Adicionar',\r\n        deleteTooltip: 'Apagar',\r\n        editTooltip: 'Editar',\r\n        editRow: {\r\n            deleteText: 'Voulez-vous supprimer cette ligne?',\r\n            cancelTooltip: 'Cancelar',\r\n            saveTooltip: 'Salvar'\r\n        }\r\n    },\r\n    toolbar: {\r\n        searchTooltip: 'Pesquisar',\r\n        searchPlaceholder: 'Pesquisar',\r\n        exportTitle: 'Exportar',\r\n        exportAriaLabel: 'Exportar',\r\n    },\r\n    pagination: {\r\n        labelRowsSelect: 'linhas',\r\n        labelDisplayedRows: '{count} de {from}-{to}',\r\n        firstTooltip: 'Primeira página',\r\n        previousTooltip: 'Página anterior',\r\n        nextTooltip: 'Próxima página',\r\n        lastTooltip: 'Última página'\r\n    },\r\n    header: {\r\n        actions: 'Ações'\r\n    }\r\n}\r\nconst operations = (query, data) => {\r\n    //Searching      \r\n    data = data.filter(o =>\r\n        o.client.name.toLowerCase().includes(query.search.toLowerCase()) ||\r\n        o.value.toString().includes(query.search) ||\r\n        new Date(o.date).toLocaleDateString().includes(query.search)\r\n    )\r\n    //Sorting \r\n    if (query.orderBy != null) {\r\n        let orderBy = query.orderBy.field;\r\n        data.sort(function (a, b) {\r\n            if (b[orderBy] < a[orderBy]) {\r\n                return -1;\r\n            }\r\n            if (b[orderBy] > a[orderBy]) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    return data;\r\n};\r\n\r\nexport default function Order(props) {\r\n\r\n    return (\r\n        <MaterialTable\r\n            title=\"Pedidos\"\r\n            columns={columns}\r\n            localization={localization}\r\n            options={{\r\n                exportButton: true,\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                }\r\n            }}\r\n            data={query =>\r\n                new Promise((resolve, reject) => {\r\n                    let api = new Api('Order?OrderBy=status desc');\r\n                    api.Get(query)\r\n                        .then(result => {\r\n                            resolve({\r\n                                data: operations(query, result.data),\r\n                                page: result.page - 1,\r\n                                totalCount: result.total\r\n                            })\r\n                        })\r\n                })\r\n            }\r\n            actions={[\r\n                {\r\n                    icon: () => <PaymentIcon />,\r\n                    tooltip: 'Pagar',\r\n                    onClick: (event, rowData) =>\r\n                        props\r\n                            .history\r\n                            .push(`/payment/client/${rowData.cLientId}`)\r\n                }\r\n            ]}\r\n            detailPanel={rowData => {\r\n                return (\r\n                    <Items orderId={rowData.id} />\r\n                )\r\n            }}\r\n        />\r\n\r\n    )\r\n};\r\n\r\n","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\payment\\Payment.jsx",["219"],"﻿import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Api from '../../services/Api'\r\n\r\n\r\nconst useInputStyles = makeStyles((theme) => ({\r\n    text: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '40ch',\r\n        },\r\n    },\r\n    button: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nexport default function Payment(props) {\r\n\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [amount, setAmount] = useState('');\r\n    const [value, setValue] = useState('');\r\n    const [valueerror, setValueError] = useState({ value: { valid: true, text: \"\" } });\r\n    const [errorMessages, setErrorMessages] = useState('');\r\n    const [successMessages, setSuccessMessages] = useState('');\r\n    const [iserror, setIserror] = useState(false);\r\n    const [ismessage, setIsmessage] = useState(false);\r\n\r\n    const clientId = props.match.params.clientId;\r\n\r\n    const inputStyles = useInputStyles();\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        let payment = {\r\n            clientId: Number(clientId),\r\n            value: Number(value)\r\n        }\r\n        new Api('Payment?').Post(payment)\r\n            .then(payment => {\r\n                setAmount(amount - value);\r\n                setValue('');\r\n                setSuccessMessages('Pagamento enviado com sucesso!')\r\n                setIsmessage(true);\r\n                setErrorMessages('');\r\n                setIserror(false)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([`Não foi possível enviar os dados ao servidor. ${error}`])\r\n                setIserror(true);\r\n                setSuccessMessages('');\r\n                setIsmessage(false);\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        /*The last line with an array is necessary or You'll get a \r\n         * 'React Hook useEffect has a missing dependency: 'props.orderId'. \r\n         * Either include it or remove the dependency array.'*/\r\n        new Api(`Client/${clientId}?`)\r\n            .Get()\r\n            .then(data => { setAmount(data.debt) })\r\n            .catch(error => {\r\n                setErrorMessages([`Não foi possível buscar os dados ao servidor. ${error}`])\r\n                setIserror(true);\r\n                setSuccessMessages('');\r\n                setIsmessage(false);\r\n            })\r\n    }, [clientId]);\r\n\r\n    useEffect(() => {\r\n        if (value <= 0 || value > amount) {\r\n            setDisabled(true);\r\n        } else {\r\n            setDisabled(false);\r\n        }\r\n    }, [value, amount]);\r\n    return (\r\n        <>\r\n            <div>\r\n                {iserror &&\r\n                    <Alert severity=\"error\">{errorMessages}</Alert>\r\n                }\r\n                {ismessage &&\r\n                    <Alert severity=\"success\">{successMessages}</Alert>\r\n                }\r\n\r\n            </div>\r\n            <form className={inputStyles.text} autoComplete=\"off\" onSubmit={onSubmit}>\r\n                <TextField\r\n                    disabled id=\"amount\"\r\n                    value={amount}\r\n                    label=\"Total\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                    required type=\"number\"\r\n                    id=\"valut\"\r\n                    label=\"Valor\"\r\n                    variant=\"outlined\"\r\n                    value={value}\r\n                    error={!valueerror.value.valid}\r\n                    helperText={valueerror.value.text}\r\n                    onChange={(event) => {\r\n                        let v = event.target.value;\r\n                        if (v <= 0 || v > amount) {\r\n                            setValueError(\r\n                                {\r\n                                    value:\r\n                                    {\r\n                                        valid: false,\r\n                                        text: `O valor precisa ser maior que 0 e menor que ${amount}`\r\n                                    }\r\n                                });\r\n                        } else {\r\n                            setValueError({ value: { valid: true, text: \"\" } });\r\n                        }\r\n                        setValue(v);\r\n                    }}\r\n                />\r\n\r\n                <div className={inputStyles.button}>\r\n                    <Button disabled={disabled} type=\"submit\" variant=\"contained\" color=\"primary\">Debitar</Button>\r\n                </div>\r\n            </form>\r\n        </>);\r\n\r\n}","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\payment\\Payments.jsx",["220"],"﻿import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport Api from '../../services/Api'\r\n\r\n\r\nconst columns =\r\n    [\r\n        { title: \"id\", field: \"id\", hidden: true },\r\n        {\r\n            title: 'Cliente', field: 'client.name', type: 'string', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Valor', field: 'amount', type: 'currency', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Data', field: 'date', type: 'date', editable: 'never'\r\n        },\r\n    ];\r\n\r\nconst localization = {\r\n    body: {\r\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n        addTooltip: 'Adicionar',\r\n        deleteTooltip: 'Apagar',\r\n        editTooltip: 'Editar',\r\n        editRow: {\r\n            deleteText: 'Voulez-vous supprimer cette ligne?',\r\n            cancelTooltip: 'Cancelar',\r\n            saveTooltip: 'Salvar'\r\n        }\r\n    },\r\n    toolbar: {\r\n        searchTooltip: 'Pesquisar',\r\n        searchPlaceholder: 'Pesquisar',\r\n        exportTitle: 'Exportar',\r\n        exportAriaLabel: 'Exportar',\r\n    },\r\n    pagination: {\r\n        labelRowsSelect: 'linhas',\r\n        labelDisplayedRows: '{count} de {from}-{to}',\r\n        firstTooltip: 'Primeira página',\r\n        previousTooltip: 'Página anterior',\r\n        nextTooltip: 'Próxima página',\r\n        lastTooltip: 'Última página'\r\n    },\r\n    header: {\r\n        actions: 'Ações'\r\n    }\r\n}\r\n\r\nconst operations = (query, data) => {\r\n    //Searching\r\n    data = data.filter(p =>\r\n        p.client.name.toLowerCase().includes(query.search.toLowerCase()) ||\r\n        p.amount.toString().includes(query.search) ||\r\n        new Date(p.date).toLocaleDateString().includes(query.search)\r\n    )\r\n    //Sorting \r\n    if (query.orderBy != null) {\r\n        let orderBy = query.orderBy.field;\r\n        data.sort(function (a, b) {\r\n            if (b[orderBy] < a[orderBy]) {\r\n                return -1;\r\n            }\r\n            if (b[orderBy] > a[orderBy]) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    return data;\r\n};\r\n\r\nexport default function Payments() {\r\n    return (\r\n        <MaterialTable\r\n            title=\"Pagamentos\"\r\n            columns={columns}\r\n            localization={localization}\r\n            options={{\r\n                exportButton: true,\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                }\r\n            }}\r\n            data={query =>\r\n                new Promise((resolve, reject) => {\r\n                    let api = new Api('Payment?');\r\n                    api.Get(query.pageSize, query.page)\r\n                        .then(result => {\r\n                            resolve({\r\n                                data: operations(query, result.data),\r\n                                page: result.page - 1,\r\n                                totalCount: result.total\r\n                            })\r\n                        })\r\n                })\r\n            }\r\n        />\r\n    )\r\n};\r\n\r\n","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\TableItem.jsx",["221"],"﻿import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nconst columns =\r\n    [\r\n        { title: \"id\", field: \"productid\", hidden: true },\r\n        {\r\n            title: 'Produto', field: 'description', type: 'string', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Valor', field: 'price', type: 'currency', editable: 'never'\r\n        },\r\n        {\r\n            title: 'Quantidade', field: 'quantity', type: 'numeric',\r\n            validate: rowData => rowData.quantity <= 0 ? '⚠️ Quantidade não pode ser menor que zero' : ''\r\n        },\r\n        {\r\n            title: 'SubTotal', field: 'subtotal', type: 'currency', editable: 'never'\r\n        }\r\n    ];\r\n\r\nconst localization = {\r\n    body: {\r\n        emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n        addTooltip: 'Adicionar',\r\n        deleteTooltip: 'Apagar',\r\n        editTooltip: 'Editar',\r\n        editRow: {\r\n            deleteText: 'Deseja apagar este item?',\r\n            cancelTooltip: 'Cancelar',\r\n            saveTooltip: 'Salvar'\r\n        }\r\n    },\r\n    toolbar: {\r\n        searchTooltip: 'Pesquisar',\r\n        searchPlaceholder: 'Pesquisar',\r\n        exportTitle: 'Exportar',\r\n        exportAriaLabel: 'Exportar',\r\n    },\r\n    pagination: {\r\n        labelRowsSelect: 'linhas',\r\n        labelDisplayedRows: '{count} de {from}-{to}',\r\n        firstTooltip: 'Primeira página',\r\n        previousTooltip: 'Página anterior',\r\n        nextTooltip: 'Próxima página',\r\n        lastTooltip: 'Última página'\r\n    },\r\n    header: {\r\n        actions: 'Ações'\r\n    }\r\n}\r\n\r\n\r\nexport function TableItem(props) {\r\n\r\n    return (\r\n        <MaterialTable\r\n            title=\"Itens\"\r\n            columns={columns}\r\n            localization={localization}\r\n            data={props.products}\r\n            options={{\r\n                exportButton: true,\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                }\r\n            }}\r\n            actions={[\r\n                {\r\n                    icon: 'save',\r\n                    tooltip: 'Salvar items',\r\n                    isFreeAction: true,\r\n                    onClick: (event) => { props.onSaveItems() }\r\n                }\r\n            ]}\r\n            editable={{\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve) => {\r\n                        props.onRowUpdate(newData, oldData, resolve);\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        props.onRowDelete(oldData, resolve);\r\n                    }),\r\n            }}\r\n        />\r\n    )\r\n}","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\TabItem.jsx",["222"],"﻿import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { ManualTabPanel } from '../sale/ManualTabPanel'\r\nimport { AutomaticTabPanel } from '../sale/AutomaticTabPanel'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },    \r\n}));\r\n\r\nexport function TabItem(props) {\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"relative\">\r\n                <Tabs value={selectedTab} onChange={handleTabChange} aria-label=\"simple tabs example\">\r\n                    <Tab label=\"Busca automática\" />\r\n                    <Tab label=\"Busca manual\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            {selectedTab === 0 && <AutomaticTabPanel onAdd={props.onAdd} />}\r\n            {selectedTab === 1 && <ManualTabPanel onAdd={props.onAdd} />}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\order\\Items.jsx",["223"],"﻿import React, { useEffect } from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Api from '../../services/Api'\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#01579b',\r\n        color: '#FFF'\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\n\r\nexport default function Items(props) {\r\n    const classes = useStyles();\r\n    const [items, setItems] = React.useState([]);\r\n\r\n    useEffect(() => {\r\n        \r\n        /*The last line with an array is necessary or You'll get a\r\n         * 'React Hook useEffect has a missing dependency: 'props.orderId'.\r\n         * Either include it or remove the dependency array.'*/\r\n        let api = new Api(`Order/${props.orderId}/Item`);\r\n        api.Get().then(data => { setItems(data) })\r\n\r\n    }, [props.orderId]);\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} size=\"small\" aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Produto</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Quantidade</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Preço</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Desconto</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Subtotal</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {items.map((item) => (\r\n                        <StyledTableRow key={item.id}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {item.product.description}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{item.quantity}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{item.value}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{item.discound}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{item.value * item.quantity}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\AutomaticTabPanel.jsx",["224"],"﻿import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '48ch',\r\n        },\r\n    },\r\n    button: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nexport function AutomaticTabPanel(props) {\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [productid, setProductid] = useState('');\r\n    const [code, setCode] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [quantity, setQuantity] = useState('');\r\n    const [quantityAvailable, setQuantityAvailable] = useState('');\r\n    const [codeerror, setCodeError] = useState({ code: { valid: true, text: \"\" } });\r\n    const [quantityerror, setQuantityErrors] = useState({ quantity: { valid: true, text: \"\" } });\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (code.length === 0 || description.length === 0 || quantity <= 0 || quantity > quantityAvailable) {\r\n            setDisabled(true);\r\n        } else {\r\n            setDisabled(false);\r\n        }\r\n    }, [code.length, description.length, quantity, quantityAvailable]);\r\n\r\n    const isOk = (response) => {\r\n        if (response !== null && response.ok) {\r\n            return response;\r\n        } else {\r\n            throw new Error(response.statusText);\r\n        }\r\n    }\r\n\r\n    const onClick = () => {\r\n        //7896591527269\r\n        return fetch(`api/Product/Code?code=${code}`, { method: 'GET' })\r\n            .then(res => isOk(res))\r\n            .then(res => res.json())\r\n            .then((product) => {\r\n                setProductid(product.id);\r\n                setDescription(product.description);\r\n                setPrice(product.salePrice);\r\n                setQuantityAvailable(product.quantity);\r\n            })\r\n            .catch(err => { console.log(err) });\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.onAdd({ productid, code, description, price, quantity, subtotal: price * quantity });\r\n\r\n        setProductid('');\r\n        setCode('');\r\n        setDescription('');\r\n        setPrice('');\r\n        setQuantity('');\r\n        setQuantityAvailable('');\r\n    }\r\n\r\n    return (\r\n        <form className={classes.text} autoComplete=\"off\"\r\n            onSubmit={onSubmit}>\r\n\r\n            <TextField\r\n                fullWidth required\r\n                id=\"code\"\r\n                value={code}\r\n                label=\"Código\"\r\n                variant=\"outlined\"\r\n                error={!codeerror.code.valid}\r\n                helperText={codeerror.code.text}\r\n                onChange={(event) => {\r\n                    let c = event.target.value;\r\n                    if (c.length < 9 || c.length > 13) {\r\n                        setCodeError(\r\n                            {\r\n                                code:\r\n                                {\r\n                                    valid: false,\r\n                                    text: \"O código precisa ter entre 9 e 13 dígitos.\"\r\n                                }\r\n                            });\r\n                    } else {\r\n                        setCodeError({ code: { valid: true, text: \"\" } });\r\n                    }\r\n                    setCode(c);\r\n                }}\r\n            />\r\n            <TextField\r\n                fullWidth\r\n                disabled id=\"description\"\r\n                value={description}\r\n                label=\"Descrição\"\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                fullWidth\r\n                disabled id=\"price\"\r\n                value={price}\r\n                label=\"Preço\"\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                fullWidth\r\n                required type=\"number\"\r\n                id=\"quantity\"\r\n                label=\"Quantidade\"\r\n                variant=\"outlined\"\r\n                value={quantity}\r\n                error={!quantityerror.quantity.valid}\r\n                helperText={quantityerror.quantity.text}\r\n                onChange={(event) => {\r\n                    let q = event.target.value;\r\n                    if (q <= 0 || q > quantityAvailable) {\r\n                        setQuantityErrors(\r\n                            {\r\n                                quantity:\r\n                                {\r\n                                    valid: false,\r\n                                    text: `A quantidade precisa ser maior que 0 e menor que ${quantityAvailable}`\r\n                                }\r\n                            });\r\n                    } else {\r\n                        setQuantityErrors({ quantity: { valid: true, text: \"\" } });\r\n                    }\r\n                    setQuantity(q);\r\n                }}\r\n            />\r\n\r\n            <div className={classes.button}>\r\n                <Button variant=\"contained\" onClick={onClick}>Buscar</Button>\r\n                <Button disabled={disabled} type=\"submit\" variant=\"contained\" color=\"primary\">Adicionar</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\sale\\ManualTabPanel.jsx",["225"],"﻿import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Api from '../../services/Api'\r\n\r\nconst useSelectStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        width: '48ch',\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst useInputStyles = makeStyles((theme) => ({\r\n    text: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '48ch',\r\n        },\r\n    },\r\n    button: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n}));\r\n\r\nexport function ManualTabPanel(props) {\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [categories, setCategories] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [currentCategory, setcurrentCategory] = useState('');\r\n    const [currentProduct, setcurrentProduct] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [quantity, setQuantity] = useState('');\r\n    const [quantityAvailable, setQuantityAvailable] = useState('');\r\n    const [quantityerror, setQuantityErrors] = useState({ quantity: { valid: true, text: \"\" } });\r\n\r\n    \r\n    const selectStyles = useSelectStyles();\r\n    const inputStyles = useInputStyles();\r\n\r\n    const handleCategoryChange = (event) => {\r\n        let categoryId = event.target.value;\r\n        setcurrentCategory(categoryId)\r\n        new Api(`Category/${categoryId}/Product?`).Get()\r\n            .then(result => { setProducts(result.data) })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const handleProductChange = (event) => {\r\n        let productId = event.target.value;\r\n        setcurrentProduct(productId)\r\n        let p = products.find(p => p.id === productId);\r\n        setPrice(p.salePrice);\r\n        setQuantityAvailable(p.quantity);\r\n    };\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        let p = products.find(p => p.id === currentProduct)\r\n        let productid = p.id;\r\n        let description = p.description;\r\n        setcurrentProduct('')\r\n        setPrice('');\r\n        setQuantity('');\r\n        setQuantityAvailable('');\r\n        props.onAdd({ productid, description, price, quantity, subtotal: price * quantity });\r\n    }\r\n\r\n    useEffect(() => {\r\n        new Api('Category?').Get()\r\n            .then(result => { setCategories(result.data) })\r\n            .catch(err => console.log(err));\r\n    }, [categories]);\r\n\r\n    useEffect(() => {\r\n        /*React Hook useEffect contains a call to 'setDisabled'.\r\n         * Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, \r\n         * pass [currentCategory.length, currentProduct.length, quantity, quantityAvailable] as a second \r\n         * argument to the useEffect Hook  react-hooks/exhaustive-deps*/\r\n        if (currentCategory.length === 0 || currentProduct.length === 0 || quantity <= 0 || quantity > quantityAvailable) {\r\n            setDisabled(true);\r\n        } else {\r\n            setDisabled(false);\r\n        }\r\n    }, [currentCategory.length, currentProduct.length, quantity, quantityAvailable]);\r\n\r\n    return (\r\n        <form className={inputStyles.text} autoComplete=\"off\"\r\n            onSubmit={onSubmit}>\r\n            <FormControl variant=\"outlined\" className={selectStyles.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Categoria</InputLabel>\r\n                <Select\r\n                    fullWidth\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={currentCategory}\r\n                    onChange={handleCategoryChange}\r\n                >\r\n                    {categories.map((category) =>\r\n                        <MenuItem key={category.id} value={category.id}>{category.title}</MenuItem>\r\n                    )}\r\n\r\n                </Select>\r\n            </FormControl>\r\n            <FormControl variant=\"outlined\" className={selectStyles.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Produto</InputLabel>\r\n                <Select\r\n                    fullWidth\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={currentProduct}\r\n                    onChange={handleProductChange}\r\n                >\r\n                    {products.map((product) =>\r\n                        <MenuItem key={product.id} value={product.id}>{product.description}</MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n            <TextField\r\n                fullWidth\r\n                disabled id=\"price\"\r\n                value={price}\r\n                label=\"Preço\"\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                fullWidth\r\n                required type=\"number\"\r\n                id=\"quantity\"\r\n                label=\"Quantidade\"\r\n                variant=\"outlined\"\r\n                value={quantity}\r\n                error={!quantityerror.quantity.valid}\r\n                helperText={quantityerror.quantity.text}\r\n                onChange={(event) => {\r\n                    let q = event.target.value;\r\n                    if (q <= 0 || q > quantityAvailable) {\r\n                        setQuantityErrors(\r\n                            {\r\n                                quantity:\r\n                                {\r\n                                    valid: false,\r\n                                    text: `A quantidade precisa ser maior que 0 e menor que ${quantityAvailable}`\r\n                                }\r\n                            });\r\n                    } else {\r\n                        setQuantityErrors({ quantity: { valid: true, text: \"\" } });\r\n                    }\r\n                    setQuantity(q);\r\n                }}\r\n            />\r\n\r\n            <div className={inputStyles.button}>\r\n                <Button disabled={disabled} type=\"submit\" variant=\"contained\" color=\"primary\">Adicionar</Button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\auth\\Login.jsx",["226"],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\auth\\FormLogin.jsx",[],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\services\\Api.jsx",[],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\category\\Category.jsx",["227"],"﻿import React, { useState } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Api from '../../services/Api'\r\nimport { isTitleValid } from '../../validators/Validator'\r\n\r\n\r\n\r\nfunction renderProductsTable(handleRowAdd, handleRowUpdate, iserror, errorMessages) {\r\n    const columns =\r\n        [\r\n            { title: \"id\", field: \"id\", hidden: true },\r\n            {\r\n                title: 'Título', field: 'title', type: 'string',\r\n                validate: rowData => ((rowData.title != null && isTitleValid(rowData.title)) ?\r\n                    true : '⚠️ Título deve ter entre 5 e 25 caracteres')\r\n            },\r\n            {\r\n                title: 'Desconto', field: 'discount', type: 'numeric',\r\n                validate: rowData => ((rowData.discount != null && rowData.discount >= 0 && rowData.discount < 100) ?\r\n                    true : '⚠️ Desconto deve ser >= 0 e <100')\r\n            },\r\n        ];\r\n\r\n    const localization = {\r\n        header: {\r\n            actions: 'Ações'\r\n        },\r\n        grouping: {\r\n            placeholder: \"Tirer l'entête ...\",\r\n            groupedBy: 'Agroupar por:'\r\n        },\r\n        body: {\r\n            emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n            addTooltip: 'Adicionar',\r\n            deleteTooltip: 'Apagar',\r\n            editTooltip: 'Editar',\r\n            filterRow: {\r\n                filterTooltip: 'Filtrar'\r\n            },\r\n            editRow: {\r\n                deleteText: 'Voulez-vous supprimer cette ligne?',\r\n                cancelTooltip: 'Cancelar',\r\n                saveTooltip: 'Salvar'\r\n            }\r\n        },\r\n        toolbar: {\r\n            addRemoveColumns: 'Ajouter ou supprimer des colonnes',\r\n            nRowsSelected: '{0} Linha(s) selecionada(s)',\r\n            showColumnsTitle: 'Ver as colunas',\r\n            showColumnsAriaLabel: 'Ver as colunas',\r\n            searchTooltip: 'Pesquisar',\r\n            searchPlaceholder: 'Pesquisar',\r\n            exportTitle: 'Exportar',\r\n            exportAriaLabel: 'Exportar',\r\n\r\n        },\r\n        pagination: {\r\n            labelDisplayedRows: '{from}-{to} de {count}',\r\n            labelRowsSelect: 'Linhas',\r\n            labelRowsPerPage: 'Linhas por página:',\r\n            firstAriaLabel: 'Primeira página',\r\n            firstTooltip: 'Primeira página',\r\n            previousAriaLabel: 'Página anterior',\r\n            previousTooltip: 'Página anterior',\r\n            nextAriaLabel: 'Próxima página',\r\n            nextTooltip: 'Próxima página',\r\n            lastAriaLabel: 'Última página',\r\n            lastTooltip: 'Última página'\r\n        }\r\n\r\n    }\r\n\r\n    const operations = (query, data) => {\r\n        //Searching\r\n        data = data.filter(p => p.title.toLowerCase().includes(query.search.toLowerCase()))\r\n        //Sorting \r\n        //Sorting \r\n        if (query.orderBy != null) {\r\n            let orderBy = query.orderBy.field;\r\n            data.sort(function (a, b) {\r\n                if (b[orderBy] < a[orderBy]) {\r\n                    return -1;\r\n                }\r\n                if (b[orderBy] > a[orderBy]) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return data;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {iserror &&\r\n                    <Alert\r\n                        severity=\"error\">\r\n                        {errorMessages.map((msg, i) => {\r\n                            return <div key={i}>{msg}</div>\r\n                        })}\r\n                    </Alert>\r\n                }\r\n            </div>\r\n            <MaterialTable\r\n                title=\"Categorias\"\r\n                columns={columns}\r\n                localization={localization}\r\n                options={{\r\n                    sorting: true,\r\n                    exportButton: true,\r\n                    headerStyle: {\r\n                        backgroundColor: '#01579b',\r\n                        color: '#FFF'\r\n                    }\r\n                }}\r\n                data={query =>\r\n                    new Promise((resolve, reject) => {\r\n                        new Api('Category?').Get(query.pageSize, query.page)\r\n                            .then(result => {\r\n                                resolve({\r\n                                    data: operations(query, result.data),\r\n                                    page: result.page - 1,\r\n                                    totalCount: result.total\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n                editable={{\r\n                    onRowAdd: newData =>\r\n                        new Promise((resolve) => {\r\n                            handleRowAdd(newData, resolve)\r\n                        }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve) => {\r\n                            handleRowUpdate(newData, oldData, resolve);\r\n                        }),\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n\r\nfunction Category() {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [errorMessages, setErrorMessages] = useState([]);\r\n    const [iserror, setIserror] = useState(false);\r\n\r\n    const handleRowAdd = (newData, resolve) => {\r\n        new Api('Category').Post(newData)\r\n            .then(product => {\r\n                let dataToAdd = [...data];\r\n                dataToAdd.push(product);\r\n                setData(dataToAdd);\r\n                resolve()\r\n                setErrorMessages([])\r\n                setIserror(false)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([`Não foi possível enviar os dados ao servidor. ${error}`])\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n\r\n    }\r\n\r\n    const handleRowUpdate = (newData, oldData, resolve) => {\r\n        let api = new Api('Category');\r\n        api.Put(newData)\r\n            .then(product => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = product;\r\n                setData([...dataUpdate]);\r\n                resolve()\r\n                setIserror(false)\r\n                setErrorMessages([])\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([\"Não foi possível atualizar o produto. Erro no servidor.\"])\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n    }\r\n\r\n    return (renderProductsTable(handleRowAdd, handleRowUpdate, iserror, errorMessages));\r\n\r\n};\r\n\r\nexport default Category;","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\validators\\Validator.jsx",[],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\Dashboard.jsx",["228"],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\listItems.jsx",["229"],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\supplier\\Supplier.jsx",["230"],"﻿import React, { useState } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Api from '../../services/Api'\r\nimport { isPhoneNumberValid, isNameValid, isEmailValid } from '../../validators/Validator'\r\n\r\nfunction renderProductsTable(handleRowAdd, handleRowUpdate, iserror, errorMessages) {\r\n    const columns =\r\n        [\r\n            { title: \"id\", field: \"id\", hidden: true },\r\n            {\r\n                title: 'Nome', field: 'name', type: 'string',\r\n                validate: rowData => ((rowData.name != null && isNameValid(rowData.name))\r\n                    ? true : '⚠️ Nome deve ter entre 5 e 50 caracteres.')\r\n            },\r\n            {\r\n                title: 'Email', field: 'email', type: 'string',\r\n                validate: rowData => ((rowData.email != null && isEmailValid(rowData.email))\r\n                    ? true : '⚠️ Email deve ter entre 5 e 50 caracteres.')\r\n            },\r\n            {\r\n                title: 'Telefone', field: 'phoneNumber', type: 'string',\r\n                validate: rowData => ((rowData.phoneNumber != null && isPhoneNumberValid(rowData.phoneNumber))\r\n                    ? true : '⚠️ Número de telefone deve ter 11 dígitos.')\r\n            }\r\n        ];\r\n\r\n    const localization = {\r\n        body: {\r\n            emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n            addTooltip: 'Adicionar',\r\n            deleteTooltip: 'Apagar',\r\n            editTooltip: 'Editar',\r\n            editRow: {\r\n                deleteText: 'Voulez-vous supprimer cette ligne?',\r\n                cancelTooltip: 'Cancelar',\r\n                saveTooltip: 'Salvar'\r\n            }\r\n        },\r\n        toolbar: {\r\n            searchTooltip: 'Pesquisar',\r\n            searchPlaceholder: 'Pesquisar',\r\n            exportTitle: 'Exportar',\r\n            exportAriaLabel: 'Exportar',\r\n        },\r\n        pagination: {\r\n            labelRowsSelect: 'linhas',\r\n            labelDisplayedRows: '{count} de {from}-{to}',\r\n            firstTooltip: 'Primeira página',\r\n            previousTooltip: 'Página anterior',\r\n            nextTooltip: 'Próxima página',\r\n            lastTooltip: 'Última página'\r\n        },\r\n        header: {\r\n            actions: 'Ações'\r\n        }\r\n    }\r\n\r\n    const operations = (query, data) => {\r\n        //Searching\r\n        data = data.filter(p =>\r\n            p.name.toLowerCase().includes(query.search.toLowerCase()) ||\r\n            p.email.toLowerCase().includes(query.search.toLowerCase()) ||\r\n            p.phoneNumber.includes(query.search)\r\n        );\r\n        //Sorting \r\n        //Sorting \r\n        if (query.orderBy != null) {\r\n            let orderBy = query.orderBy.field;\r\n            data.sort(function (a, b) {\r\n                if (b[orderBy] < a[orderBy]) {\r\n                    return -1;\r\n                }\r\n                if (b[orderBy] > a[orderBy]) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return data;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {iserror &&\r\n                    <Alert\r\n                        severity=\"error\">\r\n                        {errorMessages.map((msg, i) => {\r\n                            return <div key={i}>{msg}</div>\r\n                        })}\r\n                    </Alert>\r\n                }\r\n            </div>\r\n            <MaterialTable\r\n                title=\"Fornecedores\"\r\n                columns={columns}\r\n                localization={localization}\r\n                options={{\r\n                    exportButton: true,\r\n                    headerStyle: {\r\n                        backgroundColor: '#01579b',\r\n                        color: '#FFF'\r\n                    }\r\n                }}\r\n                data={query =>\r\n                    new Promise((resolve, reject) => {\r\n                        let api = new Api('Supplier?');\r\n                        api.Get(query.pageSize, query.page)\r\n                            .then(result => {\r\n                                resolve({\r\n                                    data: operations(query, result.data),\r\n                                    page: result.page - 1,\r\n                                    totalCount: result.total\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n                editable={{\r\n                    onRowAdd: newData =>\r\n                        new Promise((resolve) => {\r\n                            handleRowAdd(newData, resolve)\r\n                        }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve) => {\r\n                            handleRowUpdate(newData, oldData, resolve);\r\n                        }),\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n\r\nfunction Supplier() {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [errorMessages, setErrorMessages] = useState([]);\r\n    const [iserror, setIserror] = useState(false);\r\n\r\n\r\n    const handleRowAdd = (newData, resolve) => {\r\n        new Api('Supplier').Post(newData)\r\n            .then(supplier => {\r\n                let dataToAdd = [...data];\r\n                dataToAdd.push(supplier);\r\n                setData(dataToAdd);\r\n                resolve()\r\n                setErrorMessages([])\r\n                setIserror(false)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([`Não foi possível enviar os dados ao servidor. ${error}`])\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n\r\n    }\r\n\r\n    const handleRowUpdate = (newData, oldData, resolve) => {\r\n        new Api('Supplier').Put(newData)\r\n            .then(supplier => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = supplier;\r\n                setData([...dataUpdate]);\r\n                resolve()\r\n                setIserror(false)\r\n                setErrorMessages([])\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([\"Não foi possível atualizar o fornecedor. Erro no servidor.\"])\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n\r\n\r\n    }\r\n\r\n    return (renderProductsTable(handleRowAdd, handleRowUpdate, iserror, errorMessages));\r\n\r\n};\r\n\r\nexport default Supplier;","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\product\\Product.jsx",["231"],"﻿import React, { useState, useEffect } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Api from '../../services/Api'\r\nimport { isCodeValid, isNameValid } from '../../validators/Validator'\r\n\r\n\r\nfunction renderProductsTable(categories, suppliers, handleRowAdd, handleRowUpdate, iserror, errorMessages) {\r\n    const columns =\r\n        [\r\n            { title: \"id\", field: \"id\", hidden: true },\r\n            {\r\n                title: 'Descrição', field: 'description', type: 'string',\r\n                validate: rowData => ((rowData.description != null && isNameValid(rowData.description))\r\n                    ? true : '⚠️ Descrição deve ter entre 5 e 50 caracteres.')\r\n            },\r\n            {\r\n                title: 'Código', field: 'code', type: 'string',\r\n                validate: rowData => ((rowData.code != null && isCodeValid(rowData.code))\r\n                    ? true : '⚠️ Código deve ter entre 9 e 13 dígitos.')\r\n            },\r\n            {\r\n                title: 'Compra', field: 'purchasePrice', type: 'currency',\r\n                validate: rowData => ((rowData.purchasePrice != null && rowData.purchasePrice > 0)\r\n                    ? true : '⚠️ Preço de compra deve ser maior que zero.')\r\n            },\r\n            {\r\n                title: 'Venda', field: 'salePrice', type: 'currency',\r\n                validate: rowData => ((rowData.salePrice != null && rowData.salePrice > 0)\r\n                    ? true : '⚠️ Preço de venda deve ser maior que zero.')\r\n            },\r\n            {\r\n                title: 'Lucro', field: 'profit', type: 'currency', editable: 'never',\r\n                validate: rowData => ((rowData.salePrice != null && rowData.salePrice > 0)\r\n                    ? true : '⚠️ Lucro de venda deve ser maior que zero.')\r\n            },\r\n            {\r\n                title: 'Quantidade', field: 'quantity', type: 'numeric',\r\n                validate: rowData => ((rowData.quantity != null && rowData.quantity > 0)\r\n                    ? true : '⚠️ Quantidade deve ser maior que zero.')\r\n            },\r\n            {\r\n                title: 'Quantidade Mínima', field: 'minimumQuantity', type: 'numeric',\r\n                validate: rowData => ((rowData.minimumQuantity != null && rowData.minimumQuantity > 0)\r\n                    ? true : '⚠️ Quantidade mínima deve ser maior que zero.')\r\n            },\r\n            {\r\n                title: 'Desconto', field: 'discount', type: 'numeric',\r\n                validate: rowData => ((rowData.discount != null && rowData.discount >= 0 && rowData.discount < 100)\r\n                    ? true : '⚠️ Desconto deve estar entre 0 e 100.')\r\n            },\r\n            {\r\n                title: 'Categoria', field: 'categoryId', lookup: categories,\r\n                validate: rowData => ((rowData.categoryId != null)\r\n                    ? true : '⚠️ Produto deve ter categoria.')\r\n            },\r\n            {\r\n                title: 'Fornecedor', field: 'supplierId', lookup: suppliers,\r\n                validate: rowData => ((rowData.supplierId != null)\r\n                    ? true : '⚠️ Produto deve ter fornecedor.')\r\n            }\r\n        ];\r\n\r\n    const localization = {\r\n        body: {\r\n            emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n            addTooltip: 'Adicionar',\r\n            deleteTooltip: 'Apagar',\r\n            editTooltip: 'Editar',\r\n            editRow: {\r\n                deleteText: 'Voulez-vous supprimer cette ligne?',\r\n                cancelTooltip: 'Cancelar',\r\n                saveTooltip: 'Salvar'\r\n            }\r\n        },\r\n        toolbar: {\r\n            searchTooltip: 'Pesquisar',\r\n            searchPlaceholder: 'Pesquisar',\r\n            exportTitle: 'Exportar',\r\n            exportAriaLabel: 'Exportar',\r\n        },\r\n        pagination: {\r\n            labelRowsSelect: 'linhas',\r\n            labelDisplayedRows: '{count} de {from}-{to}',\r\n            firstTooltip: 'Primeira página',\r\n            previousTooltip: 'Página anterior',\r\n            nextTooltip: 'Próxima página',\r\n            lastTooltip: 'Última página'\r\n        },\r\n        header: {\r\n            actions: 'Ações'\r\n        }\r\n    }\r\n\r\n    const operations = (query, data) => {\r\n        //Searching\r\n        data = data.filter(p =>\r\n            p.description.toLowerCase().includes(query.search.toLowerCase()) ||\r\n            p.code.includes(query.search) ||\r\n            p.quantity.toString().includes(query.search) ||\r\n            p.purchasePrice.toString().includes(query.search) ||\r\n            p.salePrice.toString().includes(query.search) ||\r\n            p.discount.toString().includes(query.search) ||\r\n            p.profit.toString().includes(query.search)\r\n\r\n        );\r\n        //Sorting \r\n        if (query.orderBy != null) {\r\n            let orderBy = query.orderBy.field;\r\n            data.sort(function (a, b) {\r\n                if (b[orderBy] < a[orderBy]) {\r\n                    return -1;\r\n                }\r\n                if (b[orderBy] > a[orderBy]) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return data;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {iserror &&\r\n                    <Alert\r\n                        severity=\"error\">\r\n                        {errorMessages.map((msg, i) => {\r\n                            return <div key={i}>{msg}</div>\r\n                        })}\r\n                    </Alert>\r\n                }\r\n            </div>\r\n            <MaterialTable\r\n                title=\"Produtos\"\r\n                columns={columns}\r\n                localization={localization}\r\n                options={{\r\n                    exportButton: true,\r\n                    headerStyle: {\r\n                        backgroundColor: '#01579b',\r\n                        color: '#FFF'\r\n                    }\r\n                }}\r\n                data={query =>\r\n                    new Promise((resolve, reject) => {\r\n                        new Api('Product?').Get(query.pageSize, query.page)\r\n                            .then(result => {\r\n                                result.data = result.data.map((p) => { p.profit = p.salePrice - p.purchasePrice; return p; });\r\n                                return result;\r\n                            })\r\n                            .then(result => {\r\n                                resolve({\r\n                                    data: operations(query, result.data),\r\n                                    page: result.page - 1,\r\n                                    totalCount: result.total\r\n                                })\r\n                            })\r\n                    })\r\n                }\r\n                editable={{\r\n                    onRowAdd: newData =>\r\n                        new Promise((resolve) => {\r\n                            handleRowAdd(newData, resolve)\r\n                        }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve) => {\r\n                            handleRowUpdate(newData, oldData, resolve);\r\n                        }),\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n\r\nfunction Product() {\r\n    const [data, setData] = useState([]);\r\n    const [categories, setCategories] = useState({});\r\n    const [suppliers, setSuppliers] = useState({});\r\n    const [errorMessages, setErrorMessages] = useState([]);\r\n    const [iserror, setIserror] = useState(false);\r\n\r\n    useEffect(() => {\r\n        new Api('Category').Get()\r\n            .then(pagination => {\r\n                let entities = pagination.data.reduce((result, category) => {\r\n                    result[category.id] = category.title;\r\n                    return result;\r\n                }, {});\r\n\r\n                setCategories(entities)\r\n            }).catch(err => console.log(err));\r\n\r\n        new Api('Supplier').Get()\r\n            .then(pagination => {\r\n                let entities = pagination.data.reduce((result, suppliers) => {\r\n                    result[suppliers.id] = suppliers.name;\r\n                    return result;\r\n                }, {});\r\n                setSuppliers(entities)\r\n            }).catch(err => console.log(err));\r\n\r\n    }, [])\r\n\r\n\r\n    const handleRowAdd = (newData, resolve) => {\r\n        newData.categoryId = Number(newData.categoryId);\r\n        newData.supplierId = Number(newData.supplierId);\r\n\r\n        new Api('Product').Post(newData)\r\n            .then(product => {\r\n                let dataToAdd = [...data];\r\n                dataToAdd.push(product);\r\n                setData(dataToAdd);\r\n                resolve()\r\n                setErrorMessages([])\r\n                setIserror(false)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([`Não foi possível enviar os dados ao servidor. ${error}`])\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n\r\n    }\r\n\r\n    const handleRowUpdate = (newData, oldData, resolve) => {\r\n        newData.categoryId = Number(newData.categoryId);\r\n        newData.supplierId = Number(newData.supplierId);\r\n\r\n        new Api('Product').Put(newData).then(product => {\r\n            const dataUpdate = [...data];\r\n            const index = oldData.tableData.id;\r\n            dataUpdate[index] = product;\r\n            setData([...dataUpdate]);\r\n            resolve()\r\n            setIserror(false)\r\n            setErrorMessages([])\r\n        })\r\n            .catch(error => {\r\n                setErrorMessages([\"Não foi possível atualizar o produto. Erro no servidor.\"])\r\n                setIserror(true)\r\n                resolve()\r\n            })\r\n\r\n    }\r\n\r\n    return (renderProductsTable(categories, suppliers, handleRowAdd, handleRowUpdate, iserror, errorMessages));\r\n\r\n};\r\n\r\nexport default Product;","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\ListItems.jsx",["232"],"﻿import ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport CategoryIcon from '@material-ui/icons/Category';\r\nimport StoreIcon from '@material-ui/icons/Store';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const mainListItems = (\r\n    <div>\r\n\r\n        <ListItem button component={Link} to=\"/order\">\r\n            <ListItemIcon>\r\n                <ShoppingCartIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Pedidos\" />\r\n        </ListItem>\r\n        <ListItem button component={Link} to=\"/client\">\r\n            <ListItemIcon>\r\n                <PeopleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Clientes\" />\r\n        </ListItem>\r\n        <ListItem button component={Link} to=\"/product\">\r\n            <ListItemIcon>\r\n                <StoreIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Produtos\" />\r\n        </ListItem>\r\n\r\n        <ListItem button component={Link} to=\"/payment\">\r\n            <ListItemIcon>\r\n                <PaymentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Pagamentos\" />\r\n        </ListItem>\r\n\r\n        <ListItem button component={Link} to=\"/category\">\r\n            <ListItemIcon>\r\n                <CategoryIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Categorias\" />\r\n        </ListItem>\r\n\r\n\r\n        <ListItem button component={Link} to=\"/supplier\">\r\n            <ListItemIcon>\r\n                <SupervisorAccountIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Fornecedores\" />\r\n        </ListItem>\r\n\r\n    </div>\r\n);\r\n\r\nexport const secondaryListItems = (\r\n    <div>\r\n        <ListSubheader inset>Relatórios salvos</ListSubheader>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Mês atual\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Último trimestre\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Fim de ano\" />\r\n        </ListItem>\r\n    </div>\r\n);\r\n\r\n","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\index.jsx",[],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\report\\Report.jsx",["233"],"﻿import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport OnClients from './OnClients'\r\nimport OnProducts from './OnProducts'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}));\r\n\r\nfunction Report() {\r\n    const classes = useStyles();\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={8} lg={9}>\r\n                <Paper className={fixedHeightPaper}>\r\n                    <h3>Vendas</h3>\r\n\r\n                </Paper>\r\n            </Grid>\r\n            {/* Recent Deposits */}\r\n            <Grid item xs={12} md={4} lg={3}>\r\n                <Paper className={fixedHeightPaper}>\r\n                    <h3>Ganhos</h3>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n\r\n                <OnClients />\r\n\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n                <OnProducts />\r\n\r\n            </Grid>\r\n        </Grid>\r\n\r\n    );\r\n}\r\n\r\nexport default Report;","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\report\\OnProducts.jsx",["234"],"﻿import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport Api from '../../services/Api'\r\n\r\nexport default function OnProducts() {\r\n\r\n    const columns =\r\n        [\r\n            { title: \"id\", field: \"id\", hidden: true },\r\n            {\r\n                title: 'Descrição', field: 'description', type: 'string'\r\n\r\n            },\r\n            {\r\n                title: 'Código', field: 'code', type: 'string', editable: 'never'\r\n\r\n            },\r\n            {\r\n                title: 'Compra', field: 'purchasePrice', type: 'currency'\r\n            },\r\n            {\r\n                title: 'Venda', field: 'salePrice', type: 'currency'\r\n            },\r\n            {\r\n                title: 'Lucro', field: 'profit', type: 'currency'\r\n            },\r\n            {\r\n                title: 'Quantidade', field: 'quantity', type: 'numeric'\r\n            },\r\n            {\r\n                title: 'Quantidade Mínima', field: 'minimumQuantity', type: 'numeric',\r\n            },\r\n            {\r\n                title: 'Desconto', field: 'discount', type: 'numeric'\r\n            }\r\n        ];\r\n\r\n    const localization = {\r\n        body: {\r\n            emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n            addTooltip: 'Adicionar',\r\n            deleteTooltip: 'Apagar',\r\n            editTooltip: 'Editar',\r\n            editRow: {\r\n                deleteText: 'Voulez-vous supprimer cette ligne?',\r\n                cancelTooltip: 'Cancelar',\r\n                saveTooltip: 'Salvar'\r\n            }\r\n        },\r\n        toolbar: {\r\n            searchTooltip: 'Pesquisar',\r\n            searchPlaceholder: 'Pesquisar',\r\n            exportTitle: 'Exportar',\r\n            exportAriaLabel: 'Exportar',\r\n        },\r\n        pagination: {\r\n            labelRowsSelect: 'linhas',\r\n            labelDisplayedRows: '{count} de {from}-{to}',\r\n            firstTooltip: 'Primeira página',\r\n            previousTooltip: 'Página anterior',\r\n            nextTooltip: 'Próxima página',\r\n            lastTooltip: 'Última página'\r\n        },\r\n        header: {\r\n            actions: 'Ações'\r\n        }\r\n    }\r\n\r\n    const operations = (query, data) => {\r\n        //Searching\r\n        data = data.filter(p =>\r\n            p.description.toLowerCase().includes(query.search.toLowerCase()) ||\r\n            p.code.includes(query.search) ||\r\n            p.quantity.toString().includes(query.search) ||\r\n            p.purchasePrice.toString().includes(query.search) ||\r\n            p.salePrice.toString().includes(query.search) ||\r\n            p.discount.toString().includes(query.search) ||\r\n            p.profit.toString().includes(query.search)\r\n\r\n        );\r\n        //Sorting \r\n        if (query.orderBy != null) {\r\n            let orderBy = query.orderBy.field;\r\n            data.sort(function (a, b) {\r\n                if (b[orderBy] < a[orderBy]) {\r\n                    return -1;\r\n                }\r\n                if (b[orderBy] > a[orderBy]) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return data;\r\n    };\r\n\r\n    return (\r\n\r\n        <MaterialTable\r\n            title=\"Sugestão de compra\"\r\n            columns={columns}\r\n            localization={localization}\r\n            options={{\r\n                exportButton: true,\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                }\r\n            }}\r\n            data={query =>\r\n                new Promise((resolve, reject) => {\r\n                    new Api('Product?RunningLow=true')\r\n                        .Get(query.pageSize, query.page).then(result => {\r\n                            result.data = result.data.map((p) => { p.profit = p.salePrice - p.purchasePrice; return p; });\r\n                            return result;\r\n                        })\r\n                        .then(result => {\r\n                            resolve({\r\n                                data: operations(query, result.data),\r\n                                page: result.page - 1,\r\n                                totalCount: result.total\r\n                            })\r\n                        }).catch(err => console.log(err))\r\n                })\r\n            }\r\n        />\r\n\r\n    )\r\n\r\n};\r\n\r\n","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\report\\OnClients.jsx",["235"],"﻿import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport Api from '../../services/Api'\r\n\r\nexport default function OnClients(props) {\r\n    const columns =\r\n        [\r\n            { title: \"id\", field: \"id\", hidden: true },\r\n            {\r\n                title: 'Nome', field: 'name', type: 'string',\r\n                validate: (rowData) => ((rowData.name != null && rowData.name.length >= 10 && rowData.name.length <= 50)\r\n                    ? true : '⚠️ Nome deve ter entre 10 e 50 caracteres.')\r\n            },\r\n            {\r\n                title: 'Endereço', field: 'address', type: 'string',\r\n                validate: rowData => ((rowData.address != null && rowData.address.length >= 10 && rowData.address.length <= 100)\r\n                    ? true : '⚠️ Endereço deve ter entre 10 e 100 caracteres.')\r\n            },\r\n            {\r\n                title: 'Telefone', field: 'phoneNumber', type: 'string',\r\n                validate: rowData => ((rowData.phoneNumber != null && rowData.phoneNumber.length === 11)\r\n                    ? true : '⚠️ Número de telefone deve ter 11 dígitos.')\r\n            },\r\n            {\r\n                title: 'Status', field: 'status', lookup: { 0: 'Inativo', 1: 'Ativo' }, editable: 'never'\r\n            },\r\n            {\r\n                title: 'Débito', field: 'debt', type: 'currency', editable: 'never'\r\n            },\r\n            {\r\n                title: 'Última compra', field: 'lastPurchase', type: 'date', editable: 'never'\r\n            },\r\n        ];\r\n\r\n    const localization = {\r\n        header: {\r\n            actions: 'Ações'\r\n        },\r\n        grouping: {\r\n            placeholder: \"Tirer l'entête ...\",\r\n            groupedBy: 'Agroupar por:'\r\n        },\r\n        body: {\r\n            emptyDataSourceMessage: 'Nenhum registro para exibir',\r\n            addTooltip: 'Adicionar',\r\n            deleteTooltip: 'Apagar',\r\n            editTooltip: 'Editar',\r\n            filterRow: {\r\n                filterTooltip: 'Filtrar'\r\n            },\r\n            editRow: {\r\n                deleteText: 'Voulez-vous supprimer cette ligne?',\r\n                cancelTooltip: 'Cancelar',\r\n                saveTooltip: 'Salvar'\r\n            }\r\n        },\r\n        toolbar: {\r\n            addRemoveColumns: 'Ajouter ou supprimer des colonnes',\r\n            nRowsSelected: '{0} Linha(s) selecionada(s)',\r\n            showColumnsTitle: 'Ver as colunas',\r\n            showColumnsAriaLabel: 'Ver as colunas',\r\n            searchTooltip: 'Pesquisar',\r\n            searchPlaceholder: 'Pesquisar',\r\n            exportTitle: 'Exportar',\r\n            exportAriaLabel: 'Exportar',\r\n\r\n        },\r\n        pagination: {\r\n            labelDisplayedRows: '{from}-{to} de {count}',\r\n            labelRowsSelect: 'Linhas',\r\n            labelRowsPerPage: 'Linhas por página:',\r\n            firstAriaLabel: 'Primeira página',\r\n            firstTooltip: 'Primeira página',\r\n            previousAriaLabel: 'Página anterior',\r\n            previousTooltip: 'Página anterior',\r\n            nextAriaLabel: 'Próxima página',\r\n            nextTooltip: 'Próxima página',\r\n            lastAriaLabel: 'Última página',\r\n            lastTooltip: 'Última página'\r\n        }\r\n\r\n    }\r\n\r\n    const operations = (query, data) => {\r\n        //Searching\r\n        data = data.filter(p =>\r\n            p.name.toLowerCase().includes(query.search.toLowerCase()) ||\r\n            p.address.toLowerCase().includes(query.search.toLowerCase()) ||\r\n            p.phoneNumber.includes(query.search)\r\n        )\r\n        //Sorting \r\n        if (query.orderBy != null) {\r\n            let field = query.orderBy.field;\r\n            data.sort(function (a, b) {\r\n                if (a[field] > b[field]) {\r\n                    return 1;\r\n                }\r\n                if (a[field] < b[field]) {\r\n                    return -1;\r\n                }\r\n                // a must be equal to b\r\n                return 0;\r\n            });\r\n        }\r\n        return data;\r\n    };\r\n\r\n    return (\r\n\r\n        <MaterialTable\r\n            title=\"Clientes inativos\"\r\n            columns={columns}\r\n            localization={localization}\r\n            options={{\r\n                sorting: true,\r\n                exportButton: true,\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                }\r\n            }}\r\n            data={query =>\r\n                new Promise((resolve, reject) => {\r\n                    let api = new Api('Client?Status=0');\r\n                    api.Get(query.pageSize, query.page)\r\n                        .then(result => {                            \r\n                            resolve({\r\n                                data: operations(query, result.data),\r\n                                page: result.page - 1,\r\n                                totalCount: result.total\r\n                            })\r\n                        })\r\n                })\r\n            }\r\n            actions={[\r\n                {\r\n                    icon: () => <AddShoppingCartIcon />,\r\n                    tooltip: 'Nova venda',\r\n                    onClick: (event, rowData) => props.history.push(`/sale/client/${rowData.id}`)\r\n                }\r\n                , {\r\n                    icon: () => <PaymentIcon />,\r\n                    tooltip: 'Pagar',\r\n                    onClick: (event, rowData) =>\r\n                        props\r\n                            .history\r\n                            .push(`/payment/client/${rowData.id}`)\r\n                }\r\n            ]}\r\n        />\r\n\r\n    )\r\n\r\n};\r\n\r\n","C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\context\\AuthContext.js",[],"C:\\Users\\Renan\\source\\repos\\Stock-front-end\\src\\components\\NavBar.jsx",[],{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"245"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"246"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"247"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"248"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"249"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"250"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"251"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"252"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"253"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"254"},{"ruleId":"241","replacedBy":"255"},{"ruleId":"243","replacedBy":"256"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"257"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"258"},{"ruleId":"241","replacedBy":"259"},{"ruleId":"243","replacedBy":"260"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"261"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"262"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"263"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"264"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"265"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"266"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"267"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"268"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"269"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"270"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"271"},{"ruleId":"272","severity":1,"message":"273","line":12,"column":13,"nodeType":"274","messageId":"275","endLine":12,"endColumn":26},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"276"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"277"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"278"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"279"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"280"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"281"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"282"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"283"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":1,"nodeType":"238","messageId":"239","fix":"284"},"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"285","text":"286"},"no-native-reassign",["287"],"no-negated-in-lhs",["288"],{"range":"289","text":"286"},{"range":"290","text":"286"},{"range":"291","text":"286"},{"range":"292","text":"286"},{"range":"293","text":"286"},{"range":"294","text":"286"},{"range":"295","text":"286"},{"range":"296","text":"286"},{"range":"297","text":"286"},{"range":"298","text":"286"},["287"],["288"],{"range":"299","text":"286"},{"range":"300","text":"286"},["287"],["288"],{"range":"301","text":"286"},{"range":"302","text":"286"},{"range":"303","text":"286"},{"range":"304","text":"286"},{"range":"305","text":"286"},{"range":"306","text":"286"},{"range":"307","text":"286"},{"range":"308","text":"286"},{"range":"309","text":"286"},{"range":"310","text":"286"},{"range":"311","text":"286"},"no-unused-vars","'authenticated' is assigned a value but never used.","Identifier","unusedVar",{"range":"312","text":"286"},{"range":"313","text":"286"},{"range":"314","text":"286"},{"range":"315","text":"286"},{"range":"316","text":"286"},{"range":"317","text":"286"},{"range":"318","text":"286"},{"range":"319","text":"286"},{"range":"320","text":"286"},[-1,0],"","no-global-assign","no-unsafe-negation",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]